ibi_ed(1:1895001) = nan;
length(ibi_byb)
for i = 1:length(ibi_byb)
ibi_ed(ibi_byb_x(i)) = ibi_byb_y(k)
end
for i = 1:length(ibi_byb)
ibi_ed(ibi_byb_x(i)) = ibi_byb_y(i);
end
ibi_byb_x(i)
i
ibi_ed(ibi_byb_x(i)) = ibi_byb_y(i);
ibi_byb_y(i)
ibi_byb_x(i)
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
plot(ibi_ed)
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans));
ibi_ed(nan) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans));
nans = isnan(ibi_ed);
round(ibi_byb_x(i))
ibi_byb_y(i)
nans = isnan(ibi_ed);
TimeIncre = linspace(0,1895001,1895001);
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans));
plot(ibi_ed)
help interp1
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic',);
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
ibi_ed(1:1895001) = nan;
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
nans = isnan(ibi_ed);
TimeIncre = linspace(0,1895001,1895001);
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
plot(ibi_ed)
clear
clc
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR77_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
help dlmread
ibi_byb = dlmread IR77_ekg_1000hz_done.txt
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_x(1) = ibi_byb(1)
ibi_ed(1:length(data)) = nan;
bi_byb_x(i)
ibi_byb_x(i)
i=1
ibi_byb_x(i)
clear
clc
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
load IR77_ekg_1000hz.mat ;
ibi_byb_x(900)
ibi_byb_x(90)
a = 1.312
round(a)
round(99.99)
ibi_ed(1:length(data)) = nan;
data = ekg.trial{:}';
ibi_ed(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
nans = isnan(ibi_ed);
TimeIncre = linspace(0,1895001,1895001);
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
save ('IR77_ekg_1000hz.mat','ibi_ed')
save ('IR77_ibi_1000hz.mat','ibi_ed')
nans = isnan(ibi_ed);
TimeIncre = linspace(0,length(data),length(data));
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'linear');
ibi_ed(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
% interpolation. ibi done!
nans = isnan(ibi_ed);
TimeIncre = linspace(0,length(data),length(data));
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'linear');
% compute RSA
plot(ibi_ed)
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
rsa_ed(nans) = interp1(TimeIncre(~nans), rsa_ed(~nans), TimeIncre(nans),'linear');
rsa_ed = ibi_ed
rsa_ed = ibi_ed ;
rsa_ed(nans) = interp1(TimeIncre(~nans), rsa_ed(~nans), TimeIncre(nans),'linear');
%-- 7/21/2019 11:28 PM --%
which -all open
restoredefaultpath
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_ed(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_ed);
TimeIncre = linspace(0,length(data),length(data));
rsa_ed = ibi_ed ;
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
rsa_ed(nans) = interp1(TimeIncre(~nans), rsa_ed(~nans), TimeIncre(nans),'linear');
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
load('IR77_ekg_1000hz.mat')
data = ekg.trial{:}';
load IR77_ekg_1000hz.mat ;
load('IR77_ekg_1000hz.mat')
load('IR77_ekg_1000hz.mat', 'ibi_ed')
clear
clc
load IR77_ekg_1000hz.mat ;
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_ed(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_ed);
TimeIncre = linspace(0,length(data),length(data));
rsa_ed = ibi_ed ;
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
rsa_ed(nans) = interp1(TimeIncre(~nans), rsa_ed(~nans), TimeIncre(nans),'linear');
plot(rsa_ed,'DisplayName','rsa_ed');hold on;plot(ibi_ed,'DisplayName','ibi_ed');hold off;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
DataPhysio_Proc_Stft_1000xibi = rsa_ed
DataPhysio_Proc_Stft_4xibi = resample (DataPhysio_Proc_Stft_1000xibi,4,1000,2);
size(DataPhysio_Proc_Stft_4xibi)
7581/4
7581/(4*40)
7581/(4*60)
DataPhysio_Proc_Stft_4xibi(end-5:end) = DataPhysio_Proc_Stft_4xibi(end-5)
DataPhysio_Proc_Stft_4xibi(1:1+5) = DataPhysio_Proc_Stft_4xibi(1+5)
DataPhysio_Proc_Stft_4xibi(end-5:end) = DataPhysio_Proc_Stft_4xibi(end-6)
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Detrend))
DataPhysio_Proc_Stft_done = NaN(size(rsa_ed))
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
DataPhysio_Proc_Stft_done
plot(DataPhysio_Proc_Stft_done)
rsa_4hz = DataPhysio_Proc_Stft_done
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_4hz = DataPhysio_Proc_Stft_done;
plot(rsa_4hz)
rsa_1000hz = resample (DataPhysio_Proc_Stft_done, 1000, 4,2)
plot(rsa_1000hz)
DataPhysio_Proc_Stft_1000xibi = rsa_ed;
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
plot(rsa_ed)
DataPhysio_Proc_Stft_1000xibi = rsa_ed;
DataPhysio_Proc_Stft_4xibi = resample (DataPhysio_Proc_Stft_1000xibi,4,1000,2);
1895250 / 4
1895250 / 250
plot(rsa_4hz)
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
plot(DataPhysio_Proc_Stft_1000xibi)
plot(DataPhysio_Proc_Stft_4xibi)
DataPhysio_Proc_Stft_4xibi
DataPhysio_Proc_Stft_1000xibi = rsa_ed;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
plot(DataPhysio_Proc_Stft_done)
plot(DataPhysio_Proc_Stft_4xibi)
plot(DataPhysio_Proc_Stft_done)
plot(DataPhysio_Proc_Stft_4xibi)
DataPhysio_Proc_Stft_1000xibi = rsa_ed;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi)) ;
length(Stft_T31)
%-- 7/22/2019 3:01 AM --%
load('IR77_ekg_1000hz.mat')
run('C:\iEEG Temp\ECG_Script.m')
clear
clc
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
% load data
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_ed(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
nans = isnan(ibi_ed);
TimeIncre = linspace(0,length(data),length(data));
rsa_ed = ibi_ed ;
ibi_ed(nans) = interp1(TimeIncre(~nans), ibi_ed(~nans), TimeIncre(nans),'cubic');
rsa_ed(nans) = interp1(TimeIncre(~nans), rsa_ed(~nans), TimeIncre(nans),'linear');
clear
clc
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_ed(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
nans = isnan(ibi_ed);
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(round(ibi_byb_x(i))) = ibi_byb_y(i);
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_linear = ibi_1000hz
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold on;plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold off;
plot(ibi_1000hz_cubic)
clear
clc
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
% load data
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold on;plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold off;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi/4)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_4hz = DataPhysio_Proc_Stft_done;
size(DataPhysio_Proc_Stft_4xibi)
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi)/4) ;
size(DataPhysio_Proc_Stft_4xibi,1)
size(DataPhysio_Proc_Stft_4xibi,2)
DataPhysio_Proc_Stft_done = NaN(size(DataPhysio_Proc_Stft_4xibi,2)/4) ;
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_4hz = DataPhysio_Proc_Stft_done;
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_4hz = DataPhysio_Proc_Stft_done;
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4)) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4)) ;
size(DataPhysio_Proc_Stft_4xibi,2)/4)
size(DataPhysio_Proc_Stft_4xibi,2)/4))
size(DataPhysio_Proc_Stft_4xibi,2)/4)
size(DataPhysio_Proc_Stft_4xibi,2)/4
size(DataPhysio_Proc_Stft_4xibi)
round(size(DataPhysio_Proc_Stft_4xibi,2)/4)
NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4))
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_4hz = DataPhysio_Proc_Stft_done;
rsa_1000hz = resample (DataPhysio_Proc_Stft_done, 1000, 4,2);
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1000hz = resample (rsa_1hz, 1000, 4,2);
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1000hz = resample (rsa_1hz, 1000, 1,2);
plot(rsa_1000hz)
plot(rsa_4hz)
% create equal distance time series of nans
rsa_1000hz(1:length(data)) = nan;
length(rsa_1hz)
for i = 1:length(rsa_1hz)
ibi_1000hz((i*1000)) = rsa_1hz(i);
end
length(rsa_1hz)
1895001
rsa_1hz(i)
i=90
rsa_1hz(i)
for i = 1:length(rsa_1hz)
ibi_1000hz((i*1000)) = rsa_1hz(i);
end
rsa_1000hz(1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz((i*1000)) = rsa_1hz(i);
end
rsa_1000hz(1:length(data)) = nan;
rsa_1000hz(:,1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz((i*1000)) = rsa_1hz(i);
end
rsa_1000hz(:,1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz(1:(i*1000)) = rsa_1hz(i);
end
rsa_1000hz(:,1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)) = rsa_1hz(i);
end
rsa_1000hz(:,1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz((i*1000),1) = rsa_1hz(i);
end
%-- 7/22/2019 3:37 AM --%
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
% load data
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
clear
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
% load data
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1000hz(:,1:length(data)) = nan;
size(rsa_1000hz)
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)) = rsa_1hz(i);
end
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
plot(rsa_1000hz_cubic)
subplot (2,1,1)
plot(rsa_1000hz_cubic)
subplot (2,1,2)
plot(ibi_1000hz_cubic)
subplot (2,1,1)
rsa_1000hz_cubic(find(rsa_1000hz_cubic>10)))=nan
rsa_1000hz_cubic(find(rsa_1000hz_cubic>10))=nan
rsa_1000hz_cubic(find(rsa_1000hz_cubic>10))=nan;
subplot (2,1,1)
plot(ibi_1000hz_cubic)
subplot (2,1,2)
plot(rsa_1000hz_cubic)
subplot (2,1,1)
plot(ibi_1000hz_cubic)
subplot (2,1,2)
plot(rsa_1000hz_cubic)
%-- 7/25/2019 7:11 PM --%
run('C:\iEEG Temp\ECG_Script.m')
ECG_Script
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR77_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
CLEAR
clearCLC
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
% load data
ibi_byb = round(dlmread ('IR77_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% final step: save data
save ('IR77_ibi_1000hz.mat','ibi_1000hz')
subplot(2,1,1);
plot(ibi_1000hz_cubic);
subplot(2,1,2);
plot(rsa_1000hz_cubic);
rsa_1000hz_cubic = rsa_1000hz;
plot(rsa_1000hz)
plot(rsa_1hz)
subplot(2,1,1);
plot(ibi_1000hz_cubic);
subplot(2,1,2);
plot(rsa_1000hz_cubic);
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% final step: save data
subplot(2,1,1);
plot(ibi_1000hz_cubic);
subplot(2,1,2);
plot(rsa_1000hz_cubic);
subplot(2,1,1,)
subplot(2,1,1)
plot(ibi_byb)
subplot(2,1,2)
plot(ibi_1000hz)
plot(ibi_1000hz_cubic)
subplot(2,1,1);
plot(rsa_1hz);
subplot(2,1,2);
plot(rsa_1000hz_cubic);
%-- 7/26/2019 6:50 AM --%
run('G:\emodynamics\data\ECG data\IR77\ECG_Script.m')
(1000*15)-1
ECG_Script
rsa_1000hz_cubic(1:(1000*16)-1) = nan
rsa_1000hz_cubic(end-((1000*16)-1):end) = nan;
subplot(2,1,1);
plot(rsa_1hz);
subplot(2,1,2);
plot(rsa_1000hz_cubic);
save ('IR77_ibi_1000hz.mat','ibi_1000hz')
ECG_Script
save ('IR77_rsa_1000hz.mat','rsa_1000hz')
TimeIncre
subplot(2,1,1);
plot(ibi_1000hz_cubic,(TimeIncre)/1000);
subplot(2,1,2);
plot(rsa_1000hz_cubic,(TimeIncre)/1000);
subplot(2,1,1);
plot((TimeIncre)/1000;ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/1000;rsa_1000hz_cubic);
save ('IR77_ibi_1000hz.mat','ibi_1000hz')
save ('IR77_rsa_1000hz.mat','rsa_1000hz')
plot((TimeIncre)/1000;ibi_1000hz_cubic);
subplot(2,1,1);
plot((TimeIncre)/1000,ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/1000,rsa_1000hz_cubic);
ECG_Script
save Figure 1
savefig('IR77_EcgRsa')
run('G:\emodynamics\data\Behavioral Data\RPP ECOG v4\ieeg_behavior_import.m')
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
clear
clc
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','RPP ECOG v4','ieeg_behavior_import.m');
data = xlsread(datafilename);
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
data = xlsread(datafilename);
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
data = xlsread(datafilename);
j=1
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
timeseries_RD
timeseries_mean = nanmean(timeseries_RD,1);
timeseries_mean
timeseries_std = nanstd(timeseries_RD,1);
timeseries_std
length(timeseries_mean)
size(timeseries_RD)
for i = 1:30
for k = 1: length(timeseries_mean)
if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
timeseries_RD(i,k) = nan;
else;
end
end
end
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers
timeseries_mean = nanmean(timeseries_RD,1);
timeseries_std = nanstd(timeseries_RD,1);
for i = 1:30
for k = 1: length(timeseries_mean)
if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
timeseries_RD(i,k) = nan;
else;
end
end
end
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
Sbj_mean = nanmean(timeseries_RD,2);
timeseries_std = nanstd(timeseries_RD,2);
clear
clc
j=1
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
Sbj_mean = nanmean(timeseries_RD,2);
Sbj_std = nanstd(timeseries_RD,2);
Sbj_std = std(timeseries_RD,2);
timeseries_RD
Sbj_std = nanstd(timeseries_RD);
Sbj_std = nanstd(timeseries_RD');
Sbj_std = nanstd(timeseries_RD')';
Sbj_mean = nanmean(timeseries_RD,2);
Sbj_std = nanstd(timeseries_RD')';
All_mean = nanmean(Sbj_mean)
All_std = nanmean(Sbj_std)
Sbj_mean = nanmean(timeseries_RD,2);
All_mean = nanmean(Sbj_mean)
All_std = nanstd(All_mean)
All_std = nanstd(Sbj_mean)
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
%     % Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
Sbj_mean = nanmean(timeseries_RD,2);
All_mean = nanmean(Sbj_mean)
All_std = nanstd(Sbj_mean)
for i = 1:30
if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
timeseries_RD(i,:) = nan;
else;
end
end
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
%     % Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
Sbj_mean = nanmean(timeseries_RD,2);
All_mean = nanmean(Sbj_mean)
All_std = nanstd(Sbj_mean)
for i = 1:30
if Sbj_mean(i) > All_mean + (All_std*2) | Sbj_mean(i) < All_mean - (All_std*2);
timeseries_RD(i,:) = nan;
else;
end
end
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
%     % Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
Sbj_mean = nanmean(timeseries_RD,2);
All_mean = nanmean(Sbj_mean)
All_std = nanstd(Sbj_mean)
for i = 1:30
if Sbj_mean(i) > All_mean + (All_std*1) | Sbj_mean(i) < All_mean - (All_std*1);
timeseries_RD(i,:) = nan;
else;
end
end
clear
c
clc
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
%     % Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*3) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*3);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
Sbj_mean = nanmean(timeseries_RD,2);
All_mean = nanmean(Sbj_mean)
All_std = nanstd(Sbj_mean)
for i = 1:30
if Sbj_mean(i) > All_mean + (All_std*1) | Sbj_mean(i) < All_mean - (All_std*1);
timeseries_RD(i,:) = nan;
else;
end
end
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers (by seconds)
timeseries_mean = nanmean(timeseries_RD,1);
timeseries_std = nanstd(timeseries_RD,1);
for i = 1:30
for k = 1: length(timeseries_mean)
if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*2) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*2);
timeseries_RD(i,k) = nan;
else;
end
end
end
% Remove Outliers (by Sbj)
%     Sbj_mean = nanmean(timeseries_RD,2);
%     All_mean = nanmean(Sbj_mean)
%     All_std = nanstd(Sbj_mean)
%
%         for i = 1:30
%               if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
%                  timeseries_RD(i,:) = nan;
%               else;
%               end
%         end
%
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
save(ieeg_behavior_import_filename, 'export_normative')
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*2) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*2);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
%     Sbj_mean = nanmean(timeseries_RD,2);
%     All_mean = nanmean(Sbj_mean)
%     All_std = nanstd(Sbj_mean)
%
%         for i = 1:30
%               if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
%                  timeseries_RD(i,:) = nan;
%               else;
%               end
%         end
%
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
save(ieeg_behavior_import_filename, 'export_normative')
j=2
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
plot(timeseries_RD,'DisplayName','timeseries_RD')
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
j
j=3
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
clear
clc
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*2) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*2);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
%     Sbj_mean = nanmean(timeseries_RD,2);
%     All_mean = nanmean(Sbj_mean)
%     All_std = nanstd(Sbj_mean)
%
%         for i = 1:30
%               if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
%                  timeseries_RD(i,:) = nan;
%               else;
%               end
%         end
%
% Remove i = 26
timeseries_RD(26,:) = nan;
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean ;
elseif  j == 2;     export_normative{9} = timeseries_mean ;
elseif  j == 3;     export_normative{8} = timeseries_mean ;
elseif  j == 4;     export_normative{2} = timeseries_mean ;
elseif  j == 5;     export_normative{6} = timeseries_mean ;
elseif  j == 6;     export_normative{1} = timeseries_mean ;
elseif  j == 7;     export_normative{4} = timeseries_mean ;
elseif  j == 8;     export_normative{3} = timeseries_mean ;
export_normative{j} = timeseries_mean
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
save(ieeg_behavior_import_filename, 'export_normative')
i=1
j=1
clear timeseries*;
for i = 1:30
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
timeseries_RD(26,:) = nan;
% Remove i = 26
timeseries_RD(26,:) = nan;
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
timeseries_mean_1000(length(timeseries_mean_1000)*1000) = nans
timeseries_mean_1000(length(timeseries_mean_1000)*1000) = nans
timeseries_mean_1000 = nans(length(timeseries_mean)*1000)
timeseries_mean_1000(1:length(timeseries_mean)*1000) = nans
timeseries_mean_1000(1:length(timeseries_mean)*1000) = nan
timeseries_mean
timeseries_RD(26,:) = nan;
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% making and saving plot
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
timeseries_mean_1000(1:length(timeseries_mean)*1000) = nan
clear
clc
end
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
j=1
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
timeseries_RD(26,:) = nan;
timeseries_mean = nanmean(timeseries_RD,1);
subplot(2 , 1, 1);
plot(timeseries_mean)  ;
subplot(2 , 1, 2);
plot(timeseries_RD')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
timeseries_mean_1000(1:length(timeseries_mean)*1000) = nan
k=1
timeseries_mean_1000((k*1000)-499) = timeseries_mean(k)
for k = 1: timeseries_mean_1hz
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
timeseries_mean_1hz = timeseries_mean
timeseries_mean_1000hz(1:length(timeseries_mean_1hz)*1000) = nan;
for k = 1: timeseries_mean_1hz
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1000hz_cubic(nans) = interp1(TimeIncre(~nans), timeseries_mean_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1hz = timeseries_mean
timeseries_mean_1000hz(1:length(timeseries_mean_1hz)*1000) = nan;
for k = 1: timeseries_mean_1hz
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1000hz_cubic(nans) = interp1(TimeIncre(~nans), timeseries_mean_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
timeseries_mean
timeseries_mean_1hz = timeseries_mean
timeseries_mean_1000hz(1:length(timeseries_mean_1hz)*1000) = nan;
for k = 1: length(timeseries_mean_1hz)
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1000hz_cubic(nans) = interp1(TimeIncre(~nans), timeseries_mean_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
plot(timeseries_mean_1000hz_cubic)
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*2) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*2);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
%     Sbj_mean = nanmean(timeseries_RD,2);
%     All_mean = nanmean(Sbj_mean)
%     All_std = nanstd(Sbj_mean)
%
%         for i = 1:30
%               if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
%                  timeseries_RD(i,:) = nan;
%               else;
%               end
%         end
%
% Remove i = 26
timeseries_RD(26,:) = nan;
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% Interpolation
timeseries_mean_1hz = timeseries_mean
timeseries_mean_1000hz(1:length(timeseries_mean_1hz)*1000) = nan;
for k = 1: length(timeseries_mean_1hz)
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1000hz_cubic(nans) = interp1(TimeIncre(~nans), timeseries_mean_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% making and saving plot
subplot(3, 1, 1);
plot(timeseries_RD)  ;
subplot(3, 1, 2);
plot(timeseries_mean_1hz')    ;
subplot(3, 1, 3);
plot(timeseries_mean_1000hz_cubic')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean_1000hz_cubic ;
elseif  j == 2;     export_normative{9} = timeseries_mean_1000hz_cubic ;
elseif  j == 3;     export_normative{8} = timeseries_mean_1000hz_cubic ;
elseif  j == 4;     export_normative{2} = timeseries_mean_1000hz_cubic ;
elseif  j == 5;     export_normative{6} = timeseries_mean_1000hz_cubic ;
elseif  j == 6;     export_normative{1} = timeseries_mean_1000hz_cubic ;
elseif  j == 7;     export_normative{4} = timeseries_mean_1000hz_cubic ;
elseif  j == 8;     export_normative{3} = timeseries_mean_1000hz_cubic ;
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
save(ieeg_behavior_import_filename, 'export_normative')
% general setting
film_type = {'Fear','Amuse_Last','Amuse','Amuse','Disgust','Disgust','Neutral','Fear'};
film_name = {'Cujo','Friends','Lucy','Modern Times','Poop','Roaches','Sticks','Witness'};
datafilename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','RPP ECOG v4 Combined File.xlsx');
ieeg_behavior_import_filename = fullfile('G:','emodynamics','data','Behavioral Data','RPP ECOG v4','ieeg_behavior_import.m');
% load behavioral data
data = xlsread(datafilename);
% data processing
for j = 1:8
clear timeseries*;
for i = 1:30
% the following data are missing
%          if i == 7 & j == 3; continue; end;
%          if i == 13 & j == 4; continue; end;
%          if i == 13 & j == 7; continue; end;
%          if i == 17 & j == 7; continue; end;
%          if i == 17 & j == 8; continue; end;
trial_PD = data( find(data(:,2)== i & data(:,3)== j),4);
trial_RD = data( find(data(:,2)== i & data(:,3)== j),5);
if length(trial_PD)== 0;
report_PD(i,j) = nan;
report_RD(i,j) = nan;
timeseries_RD(i,:) = nan;
else;
report_PD(i,j) = nanmax(trial_PD);
report_RD(i,j) = nanmean(trial_RD);
timeseries_RD(i,:) = trial_RD - nanmean(trial_RD(1:30));
end;
clear trial*
end
% Remove Outliers (by seconds)
%     timeseries_mean = nanmean(timeseries_RD,1);
%     timeseries_std = nanstd(timeseries_RD,1);
%
%         for i = 1:30
%          for k = 1: length(timeseries_mean)
%               if timeseries_RD(i,k) > timeseries_mean(k)+ (timeseries_std*2) | timeseries_RD(i,k) < timeseries_mean(k)-(timeseries_std*2);
%                  timeseries_RD(i,k) = nan;
%               else;
%               end
%          end
%         end
% Remove Outliers (by Sbj)
%     Sbj_mean = nanmean(timeseries_RD,2);
%     All_mean = nanmean(Sbj_mean)
%     All_std = nanstd(Sbj_mean)
%
%         for i = 1:30
%               if Sbj_mean(i) > All_mean + (All_std*3) | Sbj_mean(i) < All_mean - (All_std*3);
%                  timeseries_RD(i,:) = nan;
%               else;
%               end
%         end
%
% Remove i = 26
timeseries_RD(26,:) = nan;
% Re-compute mean across subjects
timeseries_mean = nanmean(timeseries_RD,1);
% Interpolation
timeseries_mean_1hz = timeseries_mean
timeseries_mean_1000hz(1:length(timeseries_mean_1hz)*1000) = nan;
for k = 1: length(timeseries_mean_1hz)
timeseries_mean_1000hz((k*1000)-499) = timeseries_mean_1hz(k);
end
nans = isnan(timeseries_mean_1000hz);
TimeIncre = linspace(0,length(timeseries_mean_1000hz),length(timeseries_mean_1000hz));
timeseries_mean_1000hz_cubic = timeseries_mean_1000hz;
timeseries_mean_1000hz_cubic(nans) = interp1(TimeIncre(~nans), timeseries_mean_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% making and saving plot
subplot(3, 1, 1);
plot(timeseries_RD')  ;
subplot(3, 1, 2);
plot(timeseries_mean_1hz')    ;
subplot(3, 1, 3);
plot(timeseries_mean_1000hz_cubic')    ;
SaveFigureJpg = ['.',filesep,'Fig_',film_type{j},'_',film_name{j},'.png'];
Fig=1;
print(Fig,SaveFigureJpg,'-dpng', '-r900');
close()     ;
% saving normative rating data for iEEG processing
if      j == 1;     export_normative{5} = timeseries_mean_1000hz_cubic ;
elseif  j == 2;     export_normative{9} = timeseries_mean_1000hz_cubic ;
elseif  j == 3;     export_normative{8} = timeseries_mean_1000hz_cubic ;
elseif  j == 4;     export_normative{2} = timeseries_mean_1000hz_cubic ;
elseif  j == 5;     export_normative{6} = timeseries_mean_1000hz_cubic ;
elseif  j == 6;     export_normative{1} = timeseries_mean_1000hz_cubic ;
elseif  j == 7;     export_normative{4} = timeseries_mean_1000hz_cubic ;
elseif  j == 8;     export_normative{3} = timeseries_mean_1000hz_cubic ;
% below is the film order in iEEG data
% 1. Disgust: Roaches (154000 ms)
% 2. Happy: Modern Times (154000 ms)
% 3. Fear: Witness (154000 ms)
% 4. Neutral: Sticks (154000 ms)
% 5. Fear: Cujo (154000 ms)
% 6. Disgust: Poop Lady (154000 ms)
% 7. Neutral: ColorBars (154000 ms)
% 8. Happy: Lucy (159000 ms)
end
end
save(ieeg_behavior_import_filename, 'export_normative')
save(ieeg_behavior_import_filename, 'export_normative')
%-- 7/26/2019 10:53 AM --%
run('G:\emodynamics\scripts\Pipeline_main_ft.m')
clear
clc
clear all; close all;
%% Check which root directory
if exist('/home/knight/hoycw/','dir');root_dir='/home/knight/hoycw/';ft_dir=[root_dir 'Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set Up Directories
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ = 'IR77';
proc_id = 'main_ft';
eval(['run ' fullfile(root_dir,'emodynamics','scripts','proc_vars',[proc_id '_vars.m'])]);
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars',[SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
SBJ00_cleaning_prep(SBJ,proc.plot_psd);
%-- 7/26/2019 2:14 PM --%
clear
clc
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_cubic)
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_cubic)
SBJ00_cleaning_prep(SBJ,proc.plot_psd);
clear
clc
%% Preprocessing Pipeline
% This script should be run in sections. Functions/scripts with the SBJ##
% prefix can be run automatically, and all other sections should be
% manually editted for each dataset.
clear all; close all;
%% Check which root directory
if exist('/home/knight/hoycw/','dir');root_dir='/home/knight/hoycw/';ft_dir=[root_dir 'Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set Up Directories
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Step 0 - Processing Variables
SBJ = 'IR51';
proc_id = 'main_ft';
eval(['run ' fullfile(root_dir,'emodynamics','scripts','proc_vars',[proc_id '_vars.m'])]);
%% ========================================================================
%   Step 1- Load SBJ and Processing Variable Structures
%  ========================================================================
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars',[SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
SBJ00_cleaning_prep(SBJ,proc.plot_psd);
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Remove bad data
ibi_1000hz(find(ibi_1000hz>1500))= nan
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
%
plot(ibi_1000hz_cubic)
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
%-- 7/26/2019 3:14 PM --%
SBJ02_preproc(SBJ,proc_id)
clear all; close all;
%% Check which root directory
if exist('/home/knight/hoycw/','dir');root_dir='/home/knight/hoycw/';ft_dir=[root_dir 'Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set Up Directories
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Step 0 - Processing Variables
SBJ = 'IR51';
proc_id = 'main_ft';
eval(['run ' fullfile(root_dir,'emodynamics','scripts','proc_vars',[proc_id '_vars.m'])]);
SBJ02_preproc(SBJ,proc_id)
%-- 7/26/2019 3:15 PM --%
% Remove bad data
ibi_1000hz(find(ibi_1000hz>1500))= nan ;
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
DataRemove = find(ibi_1000hz > 1500));
DataRemove = find(ibi_1000hz > 1500);
ibi_1000hz (DataRemove)= nan;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_cubic)
DataRemove = find(ibi_1000hz > 1500);
ibi_1000hz (DataRemove)= nan;
% Interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% Remove bad data
DataRemove = find(ibi_1000hz > 1500);
ibi_1000hz (DataRemove)= nan;
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_cubic)
length(DataRemove)
DataRemove
DataRemove = find(ibi_1000hz > 1500);
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
DataRemove = find(ibi_1000hz > 1500);
ibi_1000hz (DataRemove)= nan;
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
length(DataRemove)
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
DataRemove = find(ibi_1000hz > 1500);
DataRemove_x = find(ibi_1000hz > 1500);
DataRemove_y =  ibi_1000hz(DataRemove_x)
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
DataRemove_x = find(ibi_1000hz > 1500);
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
DataRemove_x = find(ibi_1000hz > 1500);
DataRemove_y =  ibi_1000hz(DataRemove_x)
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
for i = 1: length(DataRemove)
ibi_1000hz_cubic()
end
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% Remove bad data
DataRemove_x = find(ibi_1000hz > 1500);
DataRemove_y =  ibi_1000hz(DataRemove_x);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
length(DataRemove_x)
i=1
plot(ibi_1000hz_cubic)
plot(ibi_1000hz_linear)
DataRemove_x
DataRemove_x-1
DataRemove_y =  ibi_1000hz(DataRemove_x);
DataRemove_x = find(ibi_1000hz > 1500);
DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% Identify bad data
DataRemove_x = find(ibi_1000hz > 1500);
DataRemove_xpre = find(ibi_1000hz > 1500)-1;
DataRemove_y =  ibi_1000hz(DataRemove_x);
DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_1000hz(1:length(data)) = nan;
BadIbi = find(ibi_byb > 1500) ;
length(ibi_byb)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
BadIbi = find(ibi_byb_y > 1500) ;
ibi_byb_y(BadIbi) = -9;
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
% create time series for x and y for each ibi
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
% idenfity bad ibi
BadIbi = find(ibi_byb_y > 1500) ;
ibi_byb_y(BadIbi) = -9;
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
clear
ibi_byb_y = ibi_byb
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = ibi_byb(1)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x) + ibi_byb_x (x-1);
end
BadIbi = find(ibi_byb_y > 1500) ;
BadIbi_y = find(ibi_byb_y > 1500) ;
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_byb_pre = badibi_byb-1 ;
badibi_byb_pre = badibi_byb-1 ;
badibi_ypre = ibi_byb_y(badibi_ypre) ;
badibi_byb_pre = badibi_byb-1 ;
badibi_ypre = ibi_byb_y(badibi_byb_pre) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
length(badibi_bib)
length(badibi_byb)
(badibi_x + badibi_y-1)
badibi_x(i) + badibi_y(i)-1))
ibi_1000hz(badibi_x(i): (badibi_x(i) + badibi_y(i)-1)) = -9
i
i=1
ibi_1000hz(badibi_x(i): (badibi_x(i) + badibi_y(i)-1))
badibi_x(i)
(badibi_x(i) + badibi_y(i)-1)
223107- 220322
badibi_y(i)
i
(badibi_x(i) + badibi_y(i)-1)
ibi_1000hz = ibi_1000hz'
220322-223107
220867
badibi_byb_post = badibi_byb+1 ;
badibi_post = ibi_byb_y(badibi_byb_post) ;
length(badibi_byb)
badibi_x(i)
badibi_y(i)
(badibi_x(i) - badibi_y(i))
(badibi_x(i) - badibi_y(i)+1)
ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
(badibi_x(i)+ badibi_y_next(i)-1)
ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for i = 1: length(badibi_byb)
ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz)
ibi_1000hz_cubic(find(ibi_1000hz_cubic = -9))) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9))) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_cubic)
%-- 7/26/2019 9:44 PM --%
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
clear
clc
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
round(ibi_byb(1)
ibi_byb_x
ibi_byb = round(dlmread ('IR51_ekg_1000hz_done.txt'))
ibi_byb_y = ibi_byb
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb(1)
(ibi_byb(1)/2)
round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_y = ibi_byb
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb(x)
x=2
ibi_byb(x)
round(ibi_byb_x (x-1)/2)
ibi_byb_x (x-1)/2
ibi_byb_x (x-1)
ibi_byb(x)
ibi_byb_x
ibi_byb(x)
ibi_byb_x
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb(x)
ibi_byb(x-1)
x=2
ibi_byb_x (x)
ibi_byb(x-1)
ibi_byb(x)
ibi_byb(x)/2
round(ibi_byb(x)/2)
for x = 2: length(ibi_byb)
ibi_byb_x (x) = ibi_byb(x-1) + round(ibi_byb(x)/2);
end
ibi_byb_x = ibi_byb_x'
x
ibi_byb(x-1)
ibi_byb
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
ibi_byb_y = ibi_byb
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
x=2
ibi_byb_x_temp (x)
ibi_byb(x-1)
ibi_byb(x)
ibi_byb_x_temp
ibi_byb_x_temp (x-1)
ibi_byb_x_temp (x) = ibi_byb(x) + ibi_byb_x_temp (x-1);
ibi_byb_x_temp(x-1)
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb(x) + ibi_byb_x_temp (x-1);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
badibi_byb = find(ibi_byb_y > 1500) ;
ibi_byb_x_temp = ibi_byb_x_temp'
plot(ibi_byb_x_temp,'DisplayName','ibi_byb_x_temp');hold on;plot(ibi_byb_x,'DisplayName','ibi_byb_x');hold off;
plot(ibi_byb_x,ibi_byb_x_temp,'DisplayName','ibi_byb_x_temp');hold on;plot(ibi_byb_x,ibi_byb_y,'DisplayName','ibi_byb_y');hold off;
plot(ibi_byb_x)
area(ibi_byb_x)
plot(ibi_byb_x_temp)
plot(ibi_byb_x_temp,'DisplayName','ibi_byb_x_temp');hold on;plot(ibi_byb_x,'DisplayName','ibi_byb_x');hold off;
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
x=2
ibi_byb_x_temp (x-1)
ibi_byb(x)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x_temp
round(ibi_byb_x_temp(x-1)
ibi_byb_x_temp(x-1)
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_byb
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
for i = 1: length(badibi_byb)
ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_cubic)
plot(ibi_1000hz_linear)
plot(ibi_1000hz_cubic)
plot(badibi_byb)
plot(ibi_byb)
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_cubic)
plot(ibi_1000hz_linear)
ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_linear)
clear
clc
badibi_x
length(badibi_byb)
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
length(badibi_byb)
i
i=1
badibi_x(i)
badibi_y(i)
(badibi_x(i)
ibi_1000hz = ibi_1000hz'
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
ibi_1000hz = ibi_1000hz';
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
length(badibi_byb)
ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
length(badibi_byb)
i=1
ibi_1000hz = ibi_1000hz' ;
badibi_x(i)
badibi_y(i)+1)
badibi_y(i)+1
badibi_x(i) - badibi_y(i)+1)
(badibi_x(i) - badibi_y(i)+1)
ibi_1000hz((badibi_x(i))
ibi_1000hz((badibi_x(i)))
i
ibi_1000hz(badibi_x(i))
ibi_1000hz(badibi_x(i)-1)
for z = 1:999;
if z == 30
break
else
end
end
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
end
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
end
for j = 1: 99999
if ibi_1000hz(badibi_x(i)+j) ==  nan;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break
end
end
end
badibi_byb
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
end
for j = 1: 99999
if ibi_1000hz(badibi_x(i)+j) ==  nan;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break
end
end
end
badibi_x(i)
j=1
i
i=1
ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j)
badibi_x(i)-j
ibi_1000hz(badibi_x(i)-j) = -9;
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
end
j
j=2
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
ibi_1000hz(badibi_x(i)-j)
if ibi_1000hz(badibi_x(i)-j) ==  nan;
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
ibi_1000hz_Corr = ibi_1000hz
ibi_1000hz_Corr = ibi_1000hz ;
badibi_x(i)
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz_Corr(badibi_x(i)-j) = -9;
else
break;
end
end
j
flag = 0
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
flag == 1
end
if flag == 1
break;
end
end
j
i
j
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
j
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break
end
end
for j = 1: 99999
if ibi_1000hz(badibi_x(i)-j) ==  nan;
ibi_1000hz(badibi_x(i)-j) = -9;
else
end
end
j=2
ibi_1000hz(badibi_x(i)-j)
ibi_1000hz(badibi_x(i)-j) ==  nan
ibi_1000hz(badibi_x(i)-j)
isnan(ibi_1000hz(badibi_x(i)-j))
for j = 1: 99999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
isnan(ibi_1000hz(badibi_x(i)-j))
ibi_1000hz(badibi_x(i)-j)
ibi_1000hz(badibi_x(i)-j
Error: Invalid expression. When calling a functi
ibi_1000hz(badibi_x(i)-j)
badibi_x(i)
j=2
badibi_x(i)-j
isnan(ibi_1000hz(badibi_x(i)-j))
ibi_1000hz(badibi_x(i)-j) = -9;
for j = 1: 99999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
ibi_1000hz_liner(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_cubic)
plot(ibi_1000hz_linear)
ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold on;plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold off;
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold on;plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold off;
max(ibi_1000hz_cubic)
area(ibi_1000hz_cubic)
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold on;plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold off;
plot(ibi_1000hz_cubic,'DisplayName','ibi_1000hz_cubic');hold on;plot(ibi_1000hz_linear,'DisplayName','ibi_1000hz_linear');hold off;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1000hz(:,1:length(data)) = nan;
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
rsa_1000hz_cubic(1:(1000*16)-1) = nan;
rsa_1000hz_cubic(end-((1000*16)-1):end) = nan;
plot(rsa_1000hz_cubic)
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
rsa_1000hz
rsa_1000hz(:,1:length(data)) = nan;
rsa_1000hz
i=1
(i*1000)-499
i=2
(i*1000)-499
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
plot(rsa_1hz)
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
plot(ibi_1000hz)
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
plot(ibi_1000hz_linear)
plot(ibi_1000hz_cubic)
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
nans = isnan(rsa_1000hz);
size(data)
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear
plot(ibi_1000hz_cubic)
find(ibi_1000hz_linear == nan)
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
plot(ibi_1000hz_cubic)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
en
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1hz
plot(ibi_1000hz_cubic)
rsa_1hz
%-- 7/27/2019 2:06 PM --%
clear
clc
%-- 7/27/2019 2:51 PM --%
clear
clc
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
plot(ibi_1000hz_linear)
plot(ibi_1000hz_cubic)
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
plot(DataPhysio_Proc_Stft_1000xibi)
plot(DataPhysio_Proc_Stft_4xibi)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_4xibi
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
Stft_T31
Stft_meanRSA
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
DataPhysio_Proc_Stft_done
rsa_1hz = DataPhysio_Proc_Stft_done;
rsa_1hz
plot(rsa_1hz)
DataPhysio_Proc_Stft_done
plot(DataPhysio_Proc_Stft_done)
plot(DataPhysio_Proc_Stft_done(16:1600,1))
plot(DataPhysio_Proc_Stft_done(1640:1652,1))
plot(DataPhysio_Proc_Stft_done(1653:end,1))
plot(DataPhysio_Proc_Stft_done(1535:1652,1))
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
rsa_1000hz_cubic
rsa_1hz
DataPhysio_Proc_Stft_done
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
DataPhysio_Proc_Stft_done
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = ibi_1000hz_linear;
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_meanRSA
Stft_RSA2
DataPhysio_Proc_Stft_4xibi
DataPhysio_Proc_Stft_1000xibi
ibi_1000hz_linear
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_1000xibi = round(ibi_1000hz_linear);
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
DataPhysio_Proc_Stft_1000xibi = round(ibi_1000hz_linear);
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(end-2:end) = DataPhysio_Proc_Stft_4xibi(end-3) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi(end-4:end) = DataPhysio_Proc_Stft_4xibi(end-5) ;
DataPhysio_Proc_Stft_4xibi(1:1+2) = DataPhysio_Proc_Stft_4xibi(4) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
plot(rsa_1000hz_cubic)
% Trim RSA data
rsa_1000hz_cubic(1:(1000*16)-1) = nan;
rsa_1000hz_cubic(end-((1000*16)-1):end) = nan;
subplot(2,1,1);
plot((TimeIncre)/60000,ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/60000,rsa_1000hz_cubic);
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
% % % % % % Remove bad data
% % % % % for i = length(DataRemove_x)
% % % % % ibi_1000hz_cubic (DataRemove_x(i)-)
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = round(ibi_1000hz_linear);
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
DataPhysio_Proc_Stft_4xibi(1:NumNansFirst) = DataPhysio_Proc_Stft_4xibi(NumNansFirst+1) ;
DataPhysio_Proc_Stft_4xibi(end-NumNansEnd+1:end) = DataPhysio_Proc_Stft_4xibi(end-NumNansEnd) ;
NumNansFirst = 2
NumNansEnd = 4
DataPhysio_Proc_Stft_4xibi(1:NumNansFirst) = DataPhysio_Proc_Stft_4xibi(NumNansFirst+1) ;
DataPhysio_Proc_Stft_4xibi(end-NumNansEnd+1:end) = DataPhysio_Proc_Stft_4xibi(end-NumNansEnd) ;
16+NumNansFirst
16+NumNansEnd
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% Trim RSA data
rsa_1000hz_cubic(1:(1000*(16+NumNansFirst))-1) = nan;
rsa_1000hz_cubic(end-((1000*(16+NumNansEnd))-1):end) = nan;
ibi_1000hz_linear
plot(ibi_1000hz_linear)
find (ibi_1000hz_linear == 9)
find (ibi_1000hz_linear == -9)
bedibi_= find (ibi_1000hz_linear == -9)
bedibi_x_= find (ibi_1000hz_linear == -9)
size(bedibi_x_)
length(bedibi_x_)
find
bedibi_x= find (ibi_1000hz_linear == -9);
bedibi_x(i)
i
i=1
badibi_x= find (ibi_1000hz_linear == -9);
for i = 1: length(badibi_x);
rsa_1000hz_cubic(badibi_x(i)-16000 : badibi_x(i)+16000) = nan;
end;
subplot(2,1,1);
plot((TimeIncre)/60000,ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/60000,rsa_1000hz_cubic);
save ('IR51_ibi_1000hz.mat','ibi_1000hz')
save ('IR51_rsa_1000hz.mat','rsa_1000hz')
savefig('IR51_EcgRsa')
clear
clc
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR51_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR51_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
%% Convert EKG data to beat-by-beat IBI in QRS tool
%% Convert QRS tool output, IBI from beat-by-beat to equaldistance data
% load data
ibi_byb = dlmread ('IR51_ekg_1000hz_done.txt')
% create time series for x and y for each ibi
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 1500) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
% create equal distance time series of nans
ibi_1000hz(1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
% remove nan pre and at bad ibis to avoid interpolation
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
% Prepare for interpolation
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
% % % % Identify bad data
% % % DataRemove_x = find(ibi_1000hz > 1500);
% % % DataRemove_xpre = find(ibi_1000hz > 1500)-1;
% % %
% % % DataRemove_y =  ibi_1000hz(DataRemove_x);
% % % DataRemove_ypre =  ibi_1000hz(DataRemove_xpre);
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
% % % % % % Remove bad data
% % % % % for i = length(DataRemove_x)
% % % % % ibi_1000hz_cubic (DataRemove_x(i)-)
% compute RSA
% Create PMMW windows
% s(n,k) = sumI(ai)[sum(N-1)x(m+nL)hi(m)e^-j2pi(k/K)m]^2
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = round(ibi_1000hz_linear);
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VERY FIRST AND VERY END NANS NEED TO BE CORRECTED CASE BY CASE %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NumNansFirst = 2;
NumNansEnd = 4;
DataPhysio_Proc_Stft_4xibi(1:NumNansFirst) = DataPhysio_Proc_Stft_4xibi(NumNansFirst+1) ;
DataPhysio_Proc_Stft_4xibi(end-NumNansEnd+1:end) = DataPhysio_Proc_Stft_4xibi(end-NumNansEnd) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% Trim RSA data PART-I: Very first and very ends, including 16 seconds and additional nans
rsa_1000hz_cubic(1:(1000*(16+NumNansFirst))-1) = nan;
rsa_1000hz_cubic(end-((1000*(16+NumNansEnd))-1):end) = nan;
% Trim RSA data PART-I
badibi_x= find (ibi_1000hz_linear == -9);
for i = 1: length(badibi_x);
rsa_1000hz_cubic(badibi_x(i)-16000 : badibi_x(i)+16000) = nan;
end;
% final step: save data
subplot(2,1,1);
plot((TimeIncre)/60000,ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/60000,rsa_1000hz_cubic);
save ('IR51_ibi_1000hz.mat','ibi_1000hz')
save ('IR51_rsa_1000hz.mat','rsa_1000hz')
savefig('IR51_EcgRsa')
stairs(ibi_1000hz_linear)
%% Read EKG data from matlab file, and save them in TXT file to be processed in QRS tool
load IR77_ekg_1000hz.mat ;
data = ekg.trial{:}';
fileID = fopen('IR77_ekg_1000hz.txt','w');
fprintf(fileID,'%f\r\n',data);
fclose(fileID);
ibi_byb = dlmread ('IR77_ekg_1000hz_done.txt')
ibi_byb_y = round(ibi_byb)
ibi_byb_x(1) = round(ibi_byb(1)-(ibi_byb(1)/2))
ibi_byb_x_temp(1) = round(ibi_byb(1))
for x = 2: length(ibi_byb)
ibi_byb_x_temp (x) = ibi_byb_x_temp (x-1) + ibi_byb(x);
ibi_byb_x (x) = round(ibi_byb_x_temp(x-1) + (ibi_byb(x)/2));
end
% idenfity bad ibi
badibi_byb = find(ibi_byb_y > 30000) ;
badibi_x = ibi_byb_x(badibi_byb) ;
badibi_y = ibi_byb_y(badibi_byb) ;
badibi_byb_next = badibi_byb+1 ;
badibi_y_next = ibi_byb_y(badibi_byb_next) ;
plot(ibi_byb_y)
ibi_1000hz(1:length(data)) = nan;
for i = 1:length(ibi_byb)
ibi_1000hz(ibi_byb_x(i)) = ibi_byb_y(i);
end
for i = 1: length(badibi_byb)
%     ibi_1000hz((badibi_x(i) - badibi_y(i)+1):badibi_x(i)) = -9 ;
%     ibi_1000hz( badibi_x(i): (badibi_x(i)+ badibi_y_next(i)-1)) = -9 ;
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)-j)) ==  1;
ibi_1000hz(badibi_x(i)-j) = -9;
else
break;
end
end
for j = 1: 999999
if isnan(ibi_1000hz(badibi_x(i)+j)) ==  1;
ibi_1000hz(badibi_x(i)+j) = -9;
else
break;
end
end
ibi_1000hz(badibi_x(i)) = -9;
end
nans = isnan(ibi_1000hz);
TimeIncre = linspace(0,length(data),length(data));
ibi_1000hz_cubic = ibi_1000hz;
ibi_1000hz_linear = ibi_1000hz;
% Interpolation
ibi_1000hz_cubic(nans) = interp1(TimeIncre(~nans), ibi_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
ibi_1000hz_linear(nans) = interp1(TimeIncre(~nans), ibi_1000hz_linear(~nans), TimeIncre(nans),'linear');
% ibi_1000hz_linear(find(ibi_1000hz_cubic == -9)) = nan;
ibi_1000hz_cubic(find(ibi_1000hz_cubic == -9)) = nan;
now = 4;            % found to work in Hannson 2006, 2007
Nw = 4*32;          % window length for thirty seconds, when using 250 SR; use 31 so 16 is the center
[multipeak, a]=multipeakwind(Nw,now); % creates file
% Upsample data
DataPhysio_Proc_Stft_1000xibi = round(ibi_1000hz_linear);
DataPhysio_Proc_Stft_4xibi = downsample (DataPhysio_Proc_Stft_1000xibi,250);
NumNansFirst = 2;
NumNansEnd = 5;
DataPhysio_Proc_Stft_4xibi(1:NumNansFirst) = DataPhysio_Proc_Stft_4xibi(NumNansFirst+1) ;
DataPhysio_Proc_Stft_4xibi(end-NumNansEnd+1:end) = DataPhysio_Proc_Stft_4xibi(end-NumNansEnd) ;
DataPhysio_Proc_Stft_4xibi=DataPhysio_Proc_Stft_4xibi-mean(DataPhysio_Proc_Stft_4xibi); % mean cente
% STFT
% spectrogram(x,window,noverlap,F,fs)
low = .15
high = .40
F= [low:1/32:high];
for x = 1:4
[Stft_S31,Stft_F31,Stft_T31,Stft_P32]=spectrogram(DataPhysio_Proc_Stft_4xibi,multipeak(:,x), 124, F, 4); %get the power (P)
if x == 1
Stft_RSA2 = zeros(size(Stft_P32)); %initiate
end
Stft_RSA2 = Stft_P32*a(x) + Stft_RSA2; %a weights add to 1
end
Stft_meanRSA = log(2*sum(Stft_RSA2)/128); %typical log 2*power;
Stft_forsave =vertcat(Stft_T31,Stft_meanRSA)';
DataPhysio_Proc_Stft_done = NaN(round(size(DataPhysio_Proc_Stft_4xibi,2)/4),1) ;
for x = 1:length(Stft_T31)
DataPhysio_Proc_Stft_done(Stft_T31(x)) = Stft_meanRSA(x);
end
rsa_1hz = DataPhysio_Proc_Stft_done;
% create equal distance time series of nans
rsa_1000hz(:,1:length(data)) = nan;
% put ibi data in to the nan time series
for i = 1:length(rsa_1hz)
rsa_1000hz(1,(i*1000)-499) = rsa_1hz(i);
end
% Interpolation
nans = isnan(rsa_1000hz);
TimeIncre = linspace(0,length(data),length(data));
rsa_1000hz_cubic = rsa_1000hz;
rsa_1000hz_cubic(nans) = interp1(TimeIncre(~nans), rsa_1000hz_cubic(~nans), TimeIncre(nans),'cubic');
% Trim RSA data PART-I: Very first and very ends, including 16 seconds and additional nans
rsa_1000hz_cubic(1:(1000*(16+NumNansFirst))-1) = nan;
rsa_1000hz_cubic(end-((1000*(16+NumNansEnd))-1):end) = nan;
% Trim RSA data PART-I
badibi_x= find (ibi_1000hz_linear == -9);
for i = 1: length(badibi_x);
rsa_1000hz_cubic(badibi_x(i)-16000 : badibi_x(i)+16000) = nan;
end;
subplot(2,1,1);
plot((TimeIncre)/60000,ibi_1000hz_cubic);
subplot(2,1,2);
plot((TimeIncre)/60000,rsa_1000hz_cubic);
save ('IR77_ibi_1000hz.mat','ibi_1000hz')
save ('IR77_rsa_1000hz.mat','rsa_1000hz')
savefig('IR77_EcgRsa')
%-- 7/27/2019 8:27 PM --%
run('G:\emodynamics\scripts\SBJ04_photo_parse.m')
%-- 7/28/2019 8:15 PM --%
clear
c;lc
clc
run('G:\emodynamics\scripts\Timing information.m')
%-- 7/29/2019 9:10 AM --%
x=linspace(0,10,100);
y=sin(x);
% those are the query points
xi=linspace(1,9,50);
% use histcounts to get the locations
% of the nearest left neighbours
[~,~,bin]=histcounts(xi,x);
plot(x,y,'b*')
hold on
plot(xi,y(bin),'r*')
X = [0 5 10 12 13 14];
Y = [1 2 3 1 2.8 2];
dx = 0.1;
xi = min(X):dx:max(X);
yi = interp1(X,Y,xi,'previous');
[xs,ys] = stairs(X,Y);
plot(xi,yi,'-b',xs,ys,'-r');
Data_Station1 = xlsread ('CBAK_0704_0708.csv')
clear
clc
clear
clc
Data_Stations = xlsread ('CBAK_0704_0708.csv')
Data_Stations = xlsread ('CBAK_0704_0708.csv');
clear
c;lc
clc
Data_Stations = xlsread ('CBAK_0704_0708.csv');
a = [1 1 1 2 2 3 4 5 6]
unique(your_matrix,'rows')
a = a'
unique(a,'rows')
find(Data_Stations(:,6)==1)
find(Data_Stations(:,6)==1);
Tra1 = find(Data_Stations(:,6)==1);
Tra2 = find(Data_Stations(:,6)==2);
PosTra1 = find(Data_Stations(:,6)==1);
PosTra2 = find(Data_Stations(:,6)==2);
trac1_gmt = (Data_Stations(trac1_row,2))
trac1_row = find(Data_Stations(:,6)==1);
trac2_row = find(Data_Stations(:,6)==2);
trac1_gmt = (Data_Stations(trac1_row,2))
trac1_row = find(Data_Stations(:,6)==1);
trac2_row = find(Data_Stations(:,6)==2);
trac1_gmt = (Data_Stations(trac1_row,2));
trac2_gmt = (Data_Stations(trac2_row,2));
trac1_rssi = (Data_Stations(trac1_row,7));
trac2_rssi = (Data_Stations(trac2_row,7));
trac1_actx = (Data_Stations(trac1_row,9));
trac2_actx = (Data_Stations(trac2_row,9));
trac1_acty = (Data_Stations(trac1_row,10));
trac2_acty = (Data_Stations(trac2_row,10));
trac1_actz = (Data_Stations(trac1_row,11));
trac2_actz = (Data_Stations(trac2_row,11));
trac1_row = find(Data_Stations(:,6)==1);
trac2_row = find(Data_Stations(:,6)==2);
trac1_gmt = (Data_Stations(trac1_row,2));
trac2_gmt = (Data_Stations(trac2_row,2));
trac1_station = (Data_Stations(trac1_row,4));
trac2_station = (Data_Stations(trac2_row,4));
trac1_rssi = (Data_Stations(trac1_row,7));
trac2_rssi = (Data_Stations(trac2_row,7));
trac1_actx = (Data_Stations(trac1_row,9));
trac2_actx = (Data_Stations(trac2_row,9));
trac1_acty = (Data_Stations(trac1_row,10));
trac2_acty = (Data_Stations(trac2_row,10));
trac1_actz = (Data_Stations(trac1_row,11));
trac2_actz = (Data_Stations(trac2_row,11));
trac1_correcttime = trac1_gmt - 1562227200;
trac2_correcttime = trac2_gmt - 1562227200;
trac1_gmt = (Data_Stations(trac1_row,2));
trac2_gmt = (Data_Stations(trac2_row,2));
trac1_row = find(Data_Stations(:,6)==1);
trac2_row = find(Data_Stations(:,6)==2);
trac1_pst = (Data_Stations(trac1_row,2));
trac2_pst = (Data_Stations(trac2_row,2));
trac1_epoch = (Data_Stations(trac1_row,1));
trac2_epoch = (Data_Stations(trac2_row,1));
trac1_correcttime = trac1_epoch - 1562227200;
trac2_correcttime = trac2_epoch - 1562227200;
trac1_station = (Data_Stations(trac1_row,4));
trac2_station = (Data_Stations(trac2_row,4));
trac1_rssi = (Data_Stations(trac1_row,7));
trac2_rssi = (Data_Stations(trac2_row,7));
trac1_actx = (Data_Stations(trac1_row,9));
trac2_actx = (Data_Stations(trac2_row,9));
trac1_acty = (Data_Stations(trac1_row,10));
trac2_acty = (Data_Stations(trac2_row,10));
trac1_actz = (Data_Stations(trac1_row,11));
trac2_actz = (Data_Stations(trac2_row,11))
epoch_on = 1562227200
epoch_off = 1562659200
epoch_off - epoch_on
432000/6
72000/24
3000/60
epoch_off - epoch_on
(epoch_off - epoch_on)/4
(epoch_off - epoch_on)/(4*24)
(epoch_off - epoch_on)/(5*24)
(epoch_off - epoch_on)/(5*24*60)
epoch_off - epoch_on
time_template = nan(length(epoch_off - epoch_on))
time_template = nan(1:length(epoch_off - epoch_on))
length(epoch_off - epoch_on)
time_template = nan(1:(epoch_off - epoch_on))
time_template (1:(epoch_off - epoch_on))= nan;
time_template (1:(epoch_off - epoch_on),;)= nan;
time_template (1:(epoch_off - epoch_on),:)= nan;
%-- 7/29/2019 2:47 PM --%
epoch_on = 1562227200
epoch_off = 1562659200
time_template (1:(epoch_off - epoch_on),:)= nan;
% Load TracMo files
Data_Stations = xlsread ('CBAK_0704_0708.csv');
trac1_row = find(Data_Stations(:,6)==1);
trac2_row = find(Data_Stations(:,6)==2);
trac1_pst = (Data_Stations(trac1_row,2));
trac2_pst = (Data_Stations(trac2_row,2));
trac1_epoch = (Data_Stations(trac1_row,1));
trac2_epoch = (Data_Stations(trac2_row,1));
trac1_correcttime = trac1_epoch - epoch_on;
trac2_correcttime = trac2_epoch - epoch_on;
trac1_station = (Data_Stations(trac1_row,4));
trac2_station = (Data_Stations(trac2_row,4));
trac1_rssi = (Data_Stations(trac1_row,7));
trac2_rssi = (Data_Stations(trac2_row,7));
trac1_actx = (Data_Stations(trac1_row,9));
trac2_actx = (Data_Stations(trac2_row,9));
trac1_acty = (Data_Stations(trac1_row,10));
trac2_acty = (Data_Stations(trac2_row,10));
trac1_actz = (Data_Stations(trac1_row,11));
trac2_actz = (Data_Stations(trac2_row,11));
for i = 1:length(trac1_correcttime)
time_template(trac1_correcttime(i)) =  trac1_rssi(i);
end
trac1_correcttime
epoch_on = 1562227200
epoch_off = 1562659200
time_template (1:(epoch_off - epoch_on),:)= nan;
trac1_row
trac1_stn1_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==1);
trac1_stn1_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==1);
trac1_stn2_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==2);
trac1_stn3_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==3);
trac1_stn4_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==4);
trac1_stn5_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==5);
trac2_stn1_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==1);
trac2_stn2_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==2);
trac2_stn3_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==3);
trac2_stn4_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==4);
trac2_stn5_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==5);
trac1_stn1_rssi = Data_Stations(trac1_stn1_row,7);
trac1_stn2_rssi = Data_Stations(trac1_stn2_row,7);
trac1_stn3_rssi = Data_Stations(trac1_stn3_row,7);
trac1_stn4_rssi = Data_Stations(trac1_stn4_row,7);
trac1_stn5_rssi = Data_Stations(trac1_stn5_row,7);
trac1_stn1_epoch = Data_Stations(trac1_stn1_row,1)- epoch_on;
trac1_stn2_epoch = Data_Stations(trac1_stn2_row,1)- epoch_on;
trac1_stn3_epoch = Data_Stations(trac1_stn3_row,1)- epoch_on;
trac1_stn4_epoch = Data_Stations(trac1_stn4_row,1)- epoch_on;
trac1_stn5_epoch = Data_Stations(trac1_stn5_row,1)- epoch_on;
trac2_stn1_epoch = Data_Stations(trac2_stn1_row,1)- epoch_on;
trac2_stn2_epoch = Data_Stations(trac2_stn2_row,1)- epoch_on;
trac2_stn3_epoch = Data_Stations(trac2_stn3_row,1)- epoch_on;
trac2_stn4_epoch = Data_Stations(trac2_stn4_row,1)- epoch_on;
trac2_stn5_epoch = Data_Stations(trac2_stn5_row,1)- epoch_on;
trac1_stn1_epoch
trac1_stn2_epoch
nan_template (1:(epoch_off - epoch_on),:)= nan;
pk_trac1_stn1_epoch
clear
clc
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
% Load TracMo files
data_load = xlsread ('CBAK_0704_0708.csv');
pk_trac1_stn1_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==1);
pk_trac1_stn2_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==2);
pk_trac1_stn3_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==3);
pk_trac1_stn4_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==4);
pk_trac1_stn5_row = find(Data_Stations(:,6)==1 & Data_Stations(:,4)==5);
pk_trac2_stn1_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==1);
pk_trac2_stn2_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==2);
pk_trac2_stn3_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==3);
pk_trac2_stn4_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==4);
pk_trac2_stn5_row = find(Data_Stations(:,6)==2 & Data_Stations(:,4)==5);
pk_trac1_stn1_rssi = Data_Stations(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = Data_Stations(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = Data_Stations(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = Data_Stations(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = Data_Stations(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = Data_Stations(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = Data_Stations(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = Data_Stations(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = Data_Stations(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = Data_Stations(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = Data_Stations(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = Data_Stations(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = Data_Stations(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = Data_Stations(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = Data_Stations(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = Data_Stations(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = Data_Stations(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = Data_Stations(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = Data_Stations(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = Data_Stations(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_epoch = nan_template ;
et_trac1_stn2_epoch = nan_template ;
et_trac1_stn3_epoch = nan_template ;
et_trac1_stn4_epoch = nan_template ;
et_trac1_stn5_epoch = nan_template ;
et_trac2_stn1_epoch = nan_template ;
et_trac2_stn2_epoch = nan_template ;
et_trac2_stn3_epoch = nan_template ;
et_trac2_stn4_epoch = nan_template ;
et_trac2_stn5_epoch = nan_template ;
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_epoch = nan_template ;
et_trac1_stn2_epoch = nan_template ;
et_trac1_stn3_epoch = nan_template ;
et_trac1_stn4_epoch = nan_template ;
et_trac1_stn5_epoch = nan_template ;
et_trac2_stn1_epoch = nan_template ;
et_trac2_stn2_epoch = nan_template ;
et_trac2_stn3_epoch = nan_template ;
et_trac2_stn4_epoch = nan_template ;
et_trac2_stn5_epoch = nan_template ;
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi
for i = length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(et_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
length(pk_trac1_stn1_epoch)
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(et_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
nans = isnan(pk_trac1_stn1_epoch);
nans = isnan(et_trac1_stn1_rssi);
timeincre =  = linspace(0,length(nan_template),length(nan_template));
timeincre = linspace(0,length(nan_template),length(nan_template));
timeincre = linspace(1,length(nan_template),length(nan_template));
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
plot(et_trac1_stn1_rssi)
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
plot(et_trac1_stn1_rssi)
plot(et_trac1_stn1_rssi,et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');hold on;plot(et_trac1_stn1_rssi,et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');hold off;
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');hold off;
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
subplot(2,2,1)
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
subplot(2,1,1)
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
plot(et_trac2_stn1_rssi,'DisplayName','et_trac2_stn1_rssi');hold on;plot(et_trac2_stn2_rssi,'DisplayName','et_trac2_stn2_rssi');plot(et_trac2_stn3_rssi,'DisplayName','et_trac2_stn3_rssi');plot(et_trac2_stn4_rssi,'DisplayName','et_trac2_stn4_rssi');plot(et_trac2_stn5_rssi,'DisplayName','et_trac2_stn5_rssi');hold off;
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
subplot(2,1,3)
subplot(2,1,2)
plot(et_trac2_stn1_rssi,'DisplayName','et_trac2_stn1_rssi');hold on;plot(et_trac2_stn2_rssi,'DisplayName','et_trac2_stn2_rssi');plot(et_trac2_stn3_rssi,'DisplayName','et_trac2_stn3_rssi');plot(et_trac2_stn4_rssi,'DisplayName','et_trac2_stn4_rssi');plot(et_trac2_stn5_rssi,'DisplayName','et_trac2_stn5_rssi');hold off;
data_rssi_combined (:,1) = et_trac1_stn1_rssi
data_rssi_combined (:,2) = et_trac1_stn2_rssi
data_rssi_combined (:,3) = et_trac1_stn3_rssi
data_rssi_combined (:,4) = et_trac1_stn4_rssi
data_rssi_combined (:,5) = et_trac1_stn5_rssi
data_rssi_combined (:,6) = et_trac2_stn1_rssi
data_rssi_combined (:,7) = et_trac2_stn2_rssi
data_rssi_combined (:,8) = et_trac2_stn3_rssi
data_rssi_combined (:,9) = et_trac2_stn4_rssi
data_rssi_combined (:,10) = et_trac2_stn5_rssi
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
nanmean(data_rssi_combined,1)
dayincre = timeincre/(60*60*24)
dayincre = timeincre/(60*60*24);
hourincre = timeincre/(60*60);
plot_trac1_stn1 = plot(et_trac1_stn1_rssi,dayincre)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi)
subplot(3,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi)
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi)
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi)
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi)
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red';
plot_trac1_stn1.Color = 'magenta';
plot_trac1_stn1.Color = 'blue';
plot_trac1_stn1.Color = 'cyan';
plot_trac1_stn1.Color = 'green';
subplot(3,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red';
plot_trac1_stn2.Color = 'magenta';
plot_trac1_stn3.Color = 'blue';
plot_trac1_stn4.Color = 'cyan';
plot_trac1_stn5.Color = 'green';
subplot(3,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(3,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
size(data_rssi_combined,1)
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqr(data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqr((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
subplot(3,1,2)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
subplot(3,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(3,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(3,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
data_rssi_similar = smooth(data_rssi_similar,10)
data_rssi_similar = smooth(data_rssi_similar,10);
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
data_rssi_similar_smooth = smooth(data_rssi_similarm,60);
data_rssi_similar_smooth = smooth(data_rssi_similar,60);
subplot(3,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(3,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(3,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
data_rssi_similar_smooth = smooth(data_rssi_similar,60);
clear et*
clear et* plot*
pk_trac2_stnall_row = find(data_load(:,6)==2);
pk_trac1_stnall_row = find(data_load(:,6)==1);
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_row
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
clear
clc
load('G:\emodynamics\data\IR51\04_proc\IR51_ROI_HGm_zscB30_sm0_wn250.mat')
imagesc(squeeze(hfa.powspctrm(:,1,1,:))
imagesc(squeeze(hfa.powspctrm(:,1,1,:)))
hfa.powspctrm(1,1,1,1)
hfa.powspctrm(1,1,1,end)
hfa.powspctrm(8,1,1,end)
ft_selectdata
cfg = [];
cfg.channel = {'RAC1-2','LIN5-6'};
cfg
cfg.channel = {'ROF9-10','SMA8-9'};
hfa_sel = ft_selectdata(cfg,hfa)
ft_defaults
hfa
hfa_sel
cfg
cfg.latency = [32 100];
hfa_sel = ft_selectdata(cfg,hfa)
hfa_sel.time(1)
hfa_sel.time(end)
imagesc(squeeze(hfa.powspctrm(:,1,1,:)))
imagesc(squeeze(hfa_sel.powspctrm(:,1,1,:)))
clear
clc
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
dayincre = timeincre/(60*60*24);
hourincre = timeincre/(60*60);
% Load TracMo files
data_load = xlsread ('CBAK_0704_0708.csv');
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pt_trac_epochdelta = diff(pk_trac1_epoch)
pk_trac1_row = find(data_load(:,6)==1);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pt_trac_epochdelta = diff(pk_trac1_epoch);
pt_trac_epochdelta(1) = 999
pt_trac_epochdelta(2:end) = diff(pk_trac1_epoch);
pt_trac_epochdelta(1) = 999;
pt_trac_epochdelta(2:end) = diff(pk_trac1_epoch);
pt_trac1_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
length(pk_trac1_epoch)
diff(pk_trac1_epoch);
pt_trac1_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
2:length(pk_trac1_epoch)
diff(pk_trac1_epoch)
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pt_trac1_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pt_trac1_epochdelta(1) = 999;
pt_trac2_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pt_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pt_trac1_epochkeep = find(pt_trac1_epochdelta>0)
pt_trac1_epochkeep = find(pt_trac1_epochdelta > 0);
pt_trac2_epochkeep = find(pt_trac2_epochdelta > 0);
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pt_trac1_epochdelta(1) = 999;
pt_trac2_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pt_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pt_trac1_rowkeep = find(pt_trac1_epochdelta > 0);
find(pt_trac1_epochdelta > 0)
pt_trac1_rowkeep = pk_trac1_row(find(pt_trac1_epochdelta > 0));
pt_trac2_rowkeep = pk_trac2_row(find(pt_trac2_epochdelta > 0));
pk_trac1_row
pt_trac1_rowkeep = pk_trac1_epoch(find(pt_trac1_epochdelta > 0));
pt_trac2_rowkeep = pk_trac2_epoch(find(pt_trac2_epochdelta > 0));
pt_trac1_rowkeep
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
pt_trac1_epochdelta(1) = 999;
pt_trac2_epochdelta(1) = 999;
pt_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pt_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_x_keep = pk_trac1_x(pt_trac1_epochdelta > 0)
pk_trac1_x_keep = pk_trac1_x(find(pt_trac1_epochdelta > 0));
pk_trac1_x_keep = pk_trac1_x(find(pt_trac1_epochdelta > 0));
pk_trac2_x_keep = pk_trac2_x(find(pt_trac2_epochdelta > 0));
pk_trac1_y_keep = pk_trac1_y(find(pt_trac1_epochdelta > 0));
pk_trac2_y_keep = pk_trac2_y(find(pt_trac2_epochdelta > 0));
pk_trac1_z_keep = pk_trac1_z(find(pt_trac1_epochdelta > 0));
pk_trac2_z_keep = pk_trac2_z(find(pt_trac2_epochdelta > 0));
pk_trac1_xkeep = pk_trac1_x(find(pt_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pt_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pt_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pt_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pt_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pt_trac2_epochdelta > 0));
pk_trac1_xyz_combined (:,1) = pk_trac1_xkeep
pk_trac1_xyz_combined (:,2) = pk_trac1_ykeep
pk_trac1_xyz_combined (:,3) = pk_trac1_zkeep
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac1_epoch(find(pk_trac2_epochdelta > 0));
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac1_epoch(find(pk_trac2_epochdelta > 0));
pk_trac1_xyz_combined (:,1) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_zkeep;
clear
clc
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
dayincre = timeincre/(60*60*24);
hourincre = timeincre/(60*60);
% Load TracMo files
data_load = xlsread ('CBAK_0704_0708.csv');
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac1_epoch(find(pk_trac2_epochdelta > 0));
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac1_epoch(find(pk_trac2_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
size(pk_trac1_xyz_combined,1)
for i = 1: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i)= sqrt((pk_trac1_xyz_combined (i+1,2) - pk_trac1_xyz_combined (i,2))^2 ....
+(pk_trac1_xyz_combined (i+1,3) - pk_trac1_xyz_combined (i,3))^2 ....
+(pk_trac1_xyz_combined (i+1,4) - pk_trac1_xyz_combined (i,4))^2 );
end
for i = 1: size(pk_trac1_xyz_combined,1)-1
pk_trac1_act (i)= sqrt((pk_trac1_xyz_combined (i+1,2) - pk_trac1_xyz_combined (i,2))^2 ....
+(pk_trac1_xyz_combined (i+1,3) - pk_trac1_xyz_combined (i,3))^2 ....
+(pk_trac1_xyz_combined (i+1,4) - pk_trac1_xyz_combined (i,4))^2 );
end
plot(pk_trac1_act)
pk_trac1_act (i) = 0
i=1
pk_trac1_act (i) = 0;
size(pk_trac1_xyz_combined,1)-1
size(pk_trac1_xyz_combined,1)
pk_trac1_act (1) = 0;
isnan(pk_trac1_xyz_combined (i,2) )
isnan(pk_trac1_xyz_combined (i-1,2) ) == 0
i
i=2
isnan(pk_trac1_xyz_combined (i-1,2) )
pk_trac1_xyz_combined (i,1)
pk_trac1_xyz_combined (i,1) - pk_trac1_xyz_combined (i-1,1)
for i = 2: size(pk_trac1_xyz_combined,1)
if isnan(pk_trac1_xyz_combined (i,2) ) == 0 & isnan(pk_trac1_xyz_combined (i-1,2) ) == 0
pk_trac1_act (i)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
elseif isnan(pk_trac1_xyz_combined (i,2) ) == 1 & isnan(pk_trac1_xyz_combined (i-1,2) ) == 1
pk_trac1_act (i) = nan;
else
if pk_trac1_xyz_combined (i,1) - pk_trac1_xyz_combined (i-1,1) < 10
pk_trac1_act (i)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
else
pk_trac1_act (i) = nan;
end
end
end
pk_trac1_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
if isnan(pk_trac1_xyz_combined (i,2) ) == 0 & isnan(pk_trac1_xyz_combined (i-1,2) ) == 0
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
elseif isnan(pk_trac1_xyz_combined (i,2) ) == 1 & isnan(pk_trac1_xyz_combined (i-1,2) ) == 1
pk_trac1_act (i,1) = nan;
else
if pk_trac1_xyz_combined (i,1) - pk_trac1_xyz_combined (i-1,1) < 10
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
else
pk_trac1_act (i,1) = nan;
end
end
end
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
SIZE(pk_trac2_act
size(pk_trac2_act))
size(pk_trac2_act)
et_trac1_act = nan_template
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
length(pk_trac1_epochkeep)
size(et_trac1_act )
size(pk_trac1_act)
size(pk_trac1_epochkeep)
size(pk_trac1_xyz_combined)
size(pk_trac1_xkeep)
clear pk_trac1_xyz_combined
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
size(pk_trac1_xyz_combined)
size( pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;)
clear pk*
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
plot(et_trac1_act,et_trac2_act)
plot(et_trac1_act,'DisplayName','et_trac1_act');hold on;plot(et_trac2_act,'DisplayName','et_trac2_act');hold off;
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
dayincre = timeincre/(60*60*24);
hourincre = timeincre/(60*60);
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
a = [1,2,3,4,5,6,7,8,9]
b = resample (a,3)
a = [1,2,3,4,5,6,7,8,9]
b = resample (a,3)
et_trac1_act_1hz = downsample(et_trac1_act,60)
et_trac1_act_1hz
plot(et_trac1_act_1hz)
et_trac2_act_1hz = downsample(et_trac2_act,60);
plot(et_trac2_act_1hz)
subplot(2,1,1)
plot(et_trac1_act)
subplot(2,1,2)
plot(et_trac1_act_1hz)
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
% timeincre = linspace(1,length(nan_template),length(nan_template));
% dayincre = timeincre/(60*60*24);
% hourincre = timeincre/(60*60);
timeincre = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre/(60*24);
hourincre = timeincre/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
timeincre = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre/(60*24);
hourincre = timeincre/(60);
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
% timeincre = linspace(1,length(nan_template),length(nan_template));
% dayincre = timeincre/(60*60*24);
% hourincre = timeincre/(60*60);
timeincre = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre/(60*24);
hourincre = timeincre/(60);
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
pk_trac1_stn1_epoch
clear
clc
% Load TracMo files
data_load = xlsread ('CBAK_0704_0708.csv');
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
% dayincre = timeincre/(60*60*24);
% hourincre = timeincre/(60*60);
dayincre = timeincre/(60*24);
hourincre = timeincre/(60);
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
size(et_trac1_stn1_rssi)
size(dayincre)
dayincre = timeincre/(60*24);
sizE(dayincre)
size(dayincre)
dayincre = timeincre/(60*24);
hourincre = timeincre/(60);
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
epoch_on = 1562227200
epoch_off = 1562659200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
SetCrossCorrBin =  5
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(plot_trac2_act)
CrossSeed = 1
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1)
SetCrossCorrBin =  5
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(plot_trac2_act)
DataPhysio_Act_Pt = plot_trac1_act
DataPhysio_Act_Cg = plot_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1)
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1)
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori)
Array_CrossPosition = find (Array_NanPosition == 0)
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition)
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition)
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1
Array_CorssCorr_All(1:NumNanBinStart) = nan % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag))
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag))
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)))
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 1
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 0
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 0
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1)
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2)
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan
end
end
end
Array_CorssCorr_All
DataEnd
ength(plot_trac2_act)
length(plot_trac2_act)
SetCrossCorrBin =  5
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 1;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 0;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= 0;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
plot(Array_CorssCorr_All)
et_trac1_act
plot(Array_CorssCorr_All)
plot(et_trac1_act)
DataEnd
SetCrossCorrBin
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
CrossSeed
CrossSeed = 500
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P1_Ori
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
CrossSeed = 1500
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P1_Ori
DataPhysio_CrossCorr_P2_Ori
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
SetCrossMethod
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
plot(Array_CorssCorr_All)
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'red'; hold off;
subplot(6,1,6)
plot_trac12_actlink = plot(dayincre,Array_CorssCorr_All); hold on;
plot_trac12_actlink_act.Color = 'red'; hold off;
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = plot(dayincre,Array_CorssCorr_All); hold on;
plot_trac12_actlink_act.Color = 'red'; hold off;
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = plot(dayincre,Array_CorssCorr_All); hold on;
plot_trac12_actlink.Color = 'red'; hold off;
SetCrossCorrLag
SetCrossMethod
size(DataPhysio_CrossCorr_P1_Analysis,1)
SetCrossCorrBin =  10
SetCrossCorrLag = 1
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = plot(dayincre,Array_CorssCorr_All); hold on;
plot_trac12_actlink.Color = 'red'; hold off;
% compute ACT linkage
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = plot(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.Color = 'red'; hold off;
area(Array_CorssCorr_All)
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.Color = 'red'; hold off;
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
subplot(6,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold off;
subplot(6,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(6,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(6,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(6,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(6,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(6,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(6,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
corr(data_rssi_similar,Array_CorssCorr_All)
corr(data_rssi_similar,Array_CorssCorr_All')
data_rssi_similar
isnan(Array_CorssCorr_All')
su,(isnan(Array_CorssCorr_All'))
sum(isnan(Array_CorssCorr_All'))
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,Fitbit_MET1); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,Fitbit_MET2); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
clear
clc
data_load = xlsread ('KCHC_0706_0713.csv');
% Load TracMo files
data_load = xlsread ('KCHC_0706_0713.csv');
epoch_on = 1562400000
epoch_off = 1563091200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
epoch_on = 1562400000
epoch_off = 1563091200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
pk_trac2_stn1_epoch
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
et_trac2_stn1_rssi
pk_trac2_stn1_epoch
pk_trac2_stn1_rssi
i
et_trac2_stn1_rssi
(pk_trac2_stn1_epoch(i))
pk_trac2_stn1_epoch(i)
pk_trac2_stn1_epoch
epoch_on = 1562399999
epoch_off = 1563091199
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
epoch_on = 1562399999
epoch_off = 1563091199
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
clear pk*
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
pk_trac1_stn3_row
epoch_on = 1562399999
epoch_off = 1563091199
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn3_row
pk_trac1_stn3_row
% Load TracMo files
data_load = xlsread ('KCHC_0706_0713.csv');
epoch_on = 1562399999
epoch_off = 1563091199
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
epoch_on = 1562399999
epoch_off = 1563091199
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
%% Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
% plots
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
fitbit_met1_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met2_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
fitbit_met1_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met2_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
% compute ACT linkage - Tracmo
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_load
DataPhysio_Act_Cg = fitbit_met2_load
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_load); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_load); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_fitbit_met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_load); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_load); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
save workspace
savefig fig
%-- 7/30/2019 10:26 AM --%
clear
clc
load('workspace.mat')
clear
clc
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_All(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_All(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_All(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_All(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Making plots
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_All)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
%% Fitbit MET
fitbit_met1_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met2_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,5)
fitbit_met2_smooth = smooth(fitbit_met2_load,5)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  10
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
clear et* plot*
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
clear
clc
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met1_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met2_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,5)
fitbit_met2_smooth = smooth(fitbit_met2_load,5)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Trim data (remove MET data when Sbj is not home)
% for i = 1: et_trac1_stn1_rssi
%
% end
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
clear
clc
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,5)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,5)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,5)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,5)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,5)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,5)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,5)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,5)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,5)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,5)
data_rssi_similar = smooth (data_rssi_similar,5)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,5);
et_trac2_act = smooth(et_trac2_act,5);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met1_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met2_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,5)
fitbit_met2_smooth = smooth(fitbit_met2_load,5)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Trim data (remove MET data when Sbj is not home)
% for i = 1: et_trac1_stn1_rssi
%
% end
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'magenta'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'magenta'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
et_trac1_stn1_rssi
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
diff(et_trac1_stn1_rssi)
find(diff(et_trac1_stn1_rssi)== 0)
et_away_1
et_away_1 = find(diff(et_trac1_stn1_rssi)== 0)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)
plot(et_away_trac1)
et_away_trac1(1) = 1
et_away_trac1(2) = 1
et_away_trac1(2:length(et_trac1_stn1_rssi)-1) = find(diff(et_trac1_stn1_rssi)== 0)
et_away_trac2(2:length(et_trac2_stn1_rssi)-1) = find(diff(et_trac2_stn1_rssi)== 0)
et_away_trac1(1) = 1
clear et_away*
length(et_trac1_stn1_rssi)
et_away_trac1(1) = 1
et_away_trac1(2) = 1
et_away_trac1(2:length(et_trac1_stn1_rssi)-1) = find(diff(et_trac1_stn1_rssi)== 0)
find(diff(et_trac1_stn1_rssi)== 0)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1
find(diff(et_trac1_stn1_rssi)== 0)
find(diff(et_trac1_stn1_rssi)== 0)-1
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1
size(fitbit_met1_smooth)
a = [1,2,3]
b = [3,4,5]
c = C = intersect(A,B)
C = intersect(a,b)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (intersect(et_away_trac1, et_away_trac2)) = nan;
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (intersect(et_away_trac1, et_away_trac2)) = nan;
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (intersect(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
fitbit_met2_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,5)
fitbit_met2_smooth = smooth(fitbit_met2_load,5)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Trim data (remove MET data when Sbj is not home)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (intersect(et_away_trac1, et_away_trac2)) = nan;
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (intersect(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
setsmooth
setsmooth = 10
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,setsmooth);
et_trac2_act = smooth(et_trac2_act,setsmooth);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
% Trim data (remove MET data when Sbj is not home)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (intersect(et_away_trac1, et_away_trac2)) = nan;
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (intersect(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
%% Trim data (remove MET data when Sbj is not home)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi(et_away_trac1) = nan;
et_trac1_stn2_rssi(et_away_trac1) = nan;
et_trac1_stn3_rssi(et_away_trac1) = nan;
et_trac2_stn1_rssi(et_away_trac2) = nan;
et_trac2_stn2_rssi(et_away_trac2) = nan;
et_trac2_stn3_rssi(et_away_trac2) = nan;
data_rssi_similar (intersect(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (intersect(et_away_trac1, et_away_trac2)) = nan;
% Fitbit met
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (intersect(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,abs(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
%% Trim data (remove MET data when Sbj is not home)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi(et_away_trac1) = nan;
et_trac1_stn2_rssi(et_away_trac1) = nan;
et_trac1_stn3_rssi(et_away_trac1) = nan;
et_trac2_stn1_rssi(et_away_trac2) = nan;
et_trac2_stn2_rssi(et_away_trac2) = nan;
et_trac2_stn3_rssi(et_away_trac2) = nan;
data_rssi_similar (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
% Fitbit met
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
setsmooth = 10
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1562396399
epoch_off = 1563087599
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
% pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
% pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
% pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
% pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
% pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
% pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
% pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
% pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
% pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
% pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
% pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
% pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
% et_trac1_stn4_rssi = nan_template ;
% et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
% et_trac2_stn4_rssi = nan_template ;
% et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
% for i = 1:length(pk_trac1_stn4_epoch)
%     et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
% end
% for i = 1:length(pk_trac1_stn5_epoch)
%     et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
% end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
% for i = 1:length(pk_trac2_stn4_epoch)
%     et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
% end
% for i = 1:length(pk_trac2_stn5_epoch)
%     et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
% end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac1_stn4_rssi);
% et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac1_stn5_rssi);
% et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
% nans = isnan(et_trac2_stn4_rssi);
% et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
%
% nans = isnan(et_trac2_stn5_rssi);
% et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
% data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
% data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
% data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
% data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
%         +(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
%         +(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
% end
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
% et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
% et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
% et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
% et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
% et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
% et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
% et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
% et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,setsmooth);
et_trac2_act = smooth(et_trac2_act,setsmooth);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot 00a_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_load = xlsread ('BPL Pilot 00b_minuteMETsNarrow_20190706_20190713.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi(et_away_trac1) = nan;
et_trac1_stn2_rssi(et_away_trac1) = nan;
et_trac1_stn3_rssi(et_away_trac1) = nan;
et_trac2_stn1_rssi(et_away_trac2) = nan;
et_trac2_stn2_rssi(et_away_trac2) = nan;
et_trac2_stn3_rssi(et_away_trac2) = nan;
data_rssi_similar (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act(et_away_trac1) = nan;
et_trac2_act(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
% Fitbit met
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
save workspace.mat
Output(:,1) = data_rssi_similar
Output(:,2) = Array_CorssCorr_TracmoAct
Output(:,3) = Array_CorssCorr_Fitbit_Met
Output(:,4) = et_trac2_act
Output(:,5) = et_trac2_act
Output(:,6) = fitbit_met1_smooth
Output(:,7) = fitbit_met2_smooth
xlswrite ('Output','Output')
clear
c;lc
clc
day = 11520
11520/24
480/8
60*24
i=1
j=1
k=1
time (((i-1)*1440)+((j-1)*60)+k)
(((i-1)*1440)+((j-1)*60)+k)
Log_Time (((i-1)*1440)+((j-1)*60)+k)
timelog (((i-1)*1440)+((j-1)*60)+k) = j
i=1
j=1
for i = 1:8
for j = 1:24
for k = 1:60
timelog (((i-1)*1440)+((j-1)*60)+k) = j-1
end
end
end
for i = 1:8
for j = 1:24
for k = 1:60
timelog (((i-1)*1440)+((j-1)*60)+k) = j-1;
end
end
end
length(timelog)
Output(:,1) = timelog
Output(:,2) = data_rssi_similar
Output(:,3) = Array_CorssCorr_TracmoAct
Output(:,4) = Array_CorssCorr_Fitbit_Met
Output(:,5) = et_trac2_act
Output(:,6) = et_trac2_act
Output(:,7) = fitbit_met1_smooth
Output(:,8) = fitbit_met2_smooth
xlswrite ('Output','Output')
xlswrite ('Output',Output)
for i = 1:8
for j = 1:24
for k = 1:60
timelog_day (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_hour (((i-1)*1440)+((j-1)*60)+k) = i;
end
end
end
Output(:,1) = timelog_day
Output(:,1) = timelog_hour
Output(:,2) = data_rssi_similar
Output(:,3) = Array_CorssCorr_TracmoAct
Output(:,4) = Array_CorssCorr_Fitbit_Met
Output(:,5) = et_trac2_act
Output(:,6) = et_trac2_act
Output(:,7) = fitbit_met1_smooth
Output(:,8) = fitbit_met2_smooth
xlswrite ('Output',Output)
% Output
for i = 1:8
for j = 1:24
for k = 1:60
timelog_day (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_hour (((i-1)*1440)+((j-1)*60)+k) = i;
end
end
end
Output(:,1) = timelog_day
Output(:,2) = timelog_hour
Output(:,3) = data_rssi_similar
Output(:,4) = Array_CorssCorr_TracmoAct
Output(:,5) = Array_CorssCorr_Fitbit_Met
Output(:,6) = et_trac2_act
Output(:,7) = et_trac2_act
Output(:,8) = fitbit_met1_smooth
Output(:,9) = fitbit_met2_smooth
xlswrite ('Output',Output)
for i = 1:8
for j = 1:24
for k = 1:60
timelog_hour (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_day (((i-1)*1440)+((j-1)*60)+k) = i;
end
end
end
Output(:,1) = timelog_day
Output(:,2) = timelog_hour
Output(:,3) = data_rssi_similar
Output(:,4) = Array_CorssCorr_TracmoAct
Output(:,5) = Array_CorssCorr_Fitbit_Met
Output(:,6) = et_trac2_act
Output(:,7) = et_trac2_act
Output(:,8) = fitbit_met1_smooth
Output(:,9) = fitbit_met2_smooth
xlswrite ('Output',Output)
for i = 1:8
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
for i = 1:8
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
setsmooth = 10
% Load TracMo files
data_load = xlsread ('KuanHsin_v3_0706to0713.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,setsmooth);
et_trac2_act = smooth(et_trac2_act,setsmooth);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
% smooth
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act = smooth(et_trac1_act,setsmooth);
et_trac2_act = smooth(et_trac2_act,setsmooth);
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
plot(et_trac2_stn2_rssi)
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
plot(et_trac2_stn2_rssi)
plot(et_trac1_stn2_rssi)
plot(et_trac1_stn2_rssi,et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn2_rssi,et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn2_rssi,et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');hold on;plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60)
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60)
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60)
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60)
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60)
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60)
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60)
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60)
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60)
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60)
data_rssi_similar = downsample (data_rssi_similar,60)
plot(et_trac1_stn1_rssi,'DisplayName','et_trac1_stn1_rssi');hold on;plot(et_trac1_stn2_rssi,'DisplayName','et_trac1_stn2_rssi');plot(et_trac1_stn3_rssi,'DisplayName','et_trac1_stn3_rssi');plot(et_trac1_stn4_rssi,'DisplayName','et_trac1_stn4_rssi');plot(et_trac1_stn5_rssi,'DisplayName','et_trac1_stn5_rssi');hold off;
et_trac1_stn1_rssi = smooth (et_trac1_stn1_rssi,setsmooth)
et_trac1_stn2_rssi = smooth (et_trac1_stn2_rssi,setsmooth)
et_trac1_stn3_rssi = smooth (et_trac1_stn3_rssi,setsmooth)
et_trac1_stn4_rssi = smooth (et_trac1_stn4_rssi,setsmooth)
et_trac1_stn5_rssi = smooth (et_trac1_stn5_rssi,setsmooth)
et_trac2_stn1_rssi = smooth (et_trac2_stn1_rssi,setsmooth)
et_trac2_stn2_rssi = smooth (et_trac2_stn2_rssi,setsmooth)
et_trac2_stn3_rssi = smooth (et_trac2_stn3_rssi,setsmooth)
et_trac2_stn4_rssi = smooth (et_trac2_stn4_rssi,setsmooth)
et_trac2_stn5_rssi = smooth (et_trac2_stn5_rssi,setsmooth)
data_rssi_similar = smooth (data_rssi_similar,setsmooth)
plot(et_trac1_stn2_rssi)
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
find(isnan(et_trac1_stn1_rssi)==1)
isnan(et_trac1_stn1_rssi)==1
find(isnan(et_trac1_stn1_rssi)==1)
et_trac1_stn1_rssi
find(isnan(et_trac1_stn2_rssi)==1)
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) == nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) == nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) == nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) == nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) == nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) == nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) == nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) == nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) == nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) == nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) == nan;
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) == nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) == nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) == nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) == nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) == nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) == nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) == nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) == nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) == nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) == nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) == nan;
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_actsmooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) == nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) == nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) == nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) == nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act_smooth(et_away_trac1) = nan;
et_trac2_act_smooth(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
% Fitbit met
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act_smooth(et_away_trac1) = nan;
et_trac2_act_smooth(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi); hold on;
% plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi); hold on;
% plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
% plot_trac1_stn4.Color = 'cyan'; hold on;
% plot_trac1_stn5.Color = 'green'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi); hold on;
% plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi); hold on;
% plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
% plot_trac2_stn4.Color = 'cyan'; hold on;
% plot_trac2_stn5.Color = 'green'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
clea
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) == nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) == nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) == nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) == nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) == nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) == nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) == nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) == nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) == nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) == nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) == nan;
find(isnan(et_trac1_stn2_rssi)==1)
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
clear
c;c
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act_smooth(et_away_trac1) = nan;
et_trac2_act_smooth(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
fitbit_met2_load = xlsread ('BPL Pilot 01_minuteMETsNarrow_20190627_20190702.csv');
fitbit_met1_load = xlsread ('BPL Pilot 02_minuteMETsNarrow_20190627_20190702.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('JJ_0627to0702.csv');
epoch_on = 1561618800
epoch_off = 1562137200
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot 01_minuteMETsNarrow_20190627_20190702.csv');
fitbit_met1_load = xlsread ('BPL Pilot 02_minuteMETsNarrow_20190627_20190702.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
for i = 1:6
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
save workspace
cleaer
clear
clc
data_load = xlsread ('Pilot2_0704to0708.csv');
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223800
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
clear clc
1562655600- 1562223800
(1562655600- 1562223800)/(60*24*60)
clear
cl;c
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
% Tracmo RSSI
et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
% Tracmo Act
et_trac1_act_smooth(et_away_trac1) = nan;
et_trac2_act_smooth(et_away_trac2) = nan;
Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
% Fitbit met
fitbit_met1_smooth(et_away_trac1) = nan;
fitbit_met2_smooth(et_away_trac2) = nan;
Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
data_load = xlsread ('Pilot2_0704to0708.csv');
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
%-- 7/30/2019 6:16 PM --%
run('C:\Tracmo\2019.0729\Pilot 02\Data Processing_2019.0729_Pilot 02.m')
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met2_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
clear
clc
setsmooth = 10
% Load TracMo files
data_load = xlsread ('Pilot2_0704to0708.csv');
epoch_on = 1562223600
epoch_off = 1562655600
nan_template (1:(epoch_off - epoch_on),:)= nan;
timeincre = linspace(1,length(nan_template),length(nan_template));
timeincre2 = linspace(1,length(nan_template)/60,length(nan_template)/60);
dayincre = timeincre2/(60*24);
hourincre = timeincre2/(60);
%% RSSI
% get data by package
pk_trac1_stn1_row = find(data_load(:,6)==1 & data_load(:,4)==1);
pk_trac1_stn2_row = find(data_load(:,6)==1 & data_load(:,4)==2);
pk_trac1_stn3_row = find(data_load(:,6)==1 & data_load(:,4)==3);
pk_trac1_stn4_row = find(data_load(:,6)==1 & data_load(:,4)==4);
pk_trac1_stn5_row = find(data_load(:,6)==1 & data_load(:,4)==5);
pk_trac2_stn1_row = find(data_load(:,6)==2 & data_load(:,4)==1);
pk_trac2_stn2_row = find(data_load(:,6)==2 & data_load(:,4)==2);
pk_trac2_stn3_row = find(data_load(:,6)==2 & data_load(:,4)==3);
pk_trac2_stn4_row = find(data_load(:,6)==2 & data_load(:,4)==4);
pk_trac2_stn5_row = find(data_load(:,6)==2 & data_load(:,4)==5);
pk_trac1_stn1_rssi = data_load(pk_trac1_stn1_row,7);
pk_trac1_stn2_rssi = data_load(pk_trac1_stn2_row,7);
pk_trac1_stn3_rssi = data_load(pk_trac1_stn3_row,7);
pk_trac1_stn4_rssi = data_load(pk_trac1_stn4_row,7);
pk_trac1_stn5_rssi = data_load(pk_trac1_stn5_row,7);
pk_trac2_stn1_rssi = data_load(pk_trac2_stn1_row,7);
pk_trac2_stn2_rssi = data_load(pk_trac2_stn2_row,7);
pk_trac2_stn3_rssi = data_load(pk_trac2_stn3_row,7);
pk_trac2_stn4_rssi = data_load(pk_trac2_stn4_row,7);
pk_trac2_stn5_rssi = data_load(pk_trac2_stn5_row,7);
pk_trac1_stn1_epoch = data_load(pk_trac1_stn1_row,1)- epoch_on;
pk_trac1_stn2_epoch = data_load(pk_trac1_stn2_row,1)- epoch_on;
pk_trac1_stn3_epoch = data_load(pk_trac1_stn3_row,1)- epoch_on;
pk_trac1_stn4_epoch = data_load(pk_trac1_stn4_row,1)- epoch_on;
pk_trac1_stn5_epoch = data_load(pk_trac1_stn5_row,1)- epoch_on;
pk_trac2_stn1_epoch = data_load(pk_trac2_stn1_row,1)- epoch_on;
pk_trac2_stn2_epoch = data_load(pk_trac2_stn2_row,1)- epoch_on;
pk_trac2_stn3_epoch = data_load(pk_trac2_stn3_row,1)- epoch_on;
pk_trac2_stn4_epoch = data_load(pk_trac2_stn4_row,1)- epoch_on;
pk_trac2_stn5_epoch = data_load(pk_trac2_stn5_row,1)- epoch_on;
% set up equal distance nans
et_trac1_stn1_rssi = nan_template ;
et_trac1_stn2_rssi = nan_template ;
et_trac1_stn3_rssi = nan_template ;
et_trac1_stn4_rssi = nan_template ;
et_trac1_stn5_rssi = nan_template ;
et_trac2_stn1_rssi = nan_template ;
et_trac2_stn2_rssi = nan_template ;
et_trac2_stn3_rssi = nan_template ;
et_trac2_stn4_rssi = nan_template ;
et_trac2_stn5_rssi = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_stn1_epoch)
et_trac1_stn1_rssi(pk_trac1_stn1_epoch(i)) = pk_trac1_stn1_rssi (i);
end
for i = 1:length(pk_trac1_stn2_epoch)
et_trac1_stn2_rssi(pk_trac1_stn2_epoch(i)) = pk_trac1_stn2_rssi (i);
end
for i = 1:length(pk_trac1_stn3_epoch)
et_trac1_stn3_rssi(pk_trac1_stn3_epoch(i)) = pk_trac1_stn3_rssi (i);
end
for i = 1:length(pk_trac1_stn4_epoch)
et_trac1_stn4_rssi(pk_trac1_stn4_epoch(i)) = pk_trac1_stn4_rssi (i);
end
for i = 1:length(pk_trac1_stn5_epoch)
et_trac1_stn5_rssi(pk_trac1_stn5_epoch(i)) = pk_trac1_stn5_rssi (i);
end
for i = 1:length(pk_trac2_stn1_epoch)
et_trac2_stn1_rssi(pk_trac2_stn1_epoch(i)) = pk_trac2_stn1_rssi (i);
end
for i = 1:length(pk_trac2_stn2_epoch)
et_trac2_stn2_rssi(pk_trac2_stn2_epoch(i)) = pk_trac2_stn2_rssi (i);
end
for i = 1:length(pk_trac2_stn3_epoch)
et_trac2_stn3_rssi(pk_trac2_stn3_epoch(i)) = pk_trac2_stn3_rssi (i);
end
for i = 1:length(pk_trac2_stn4_epoch)
et_trac2_stn4_rssi(pk_trac2_stn4_epoch(i)) = pk_trac2_stn4_rssi (i);
end
for i = 1:length(pk_trac2_stn5_epoch)
et_trac2_stn5_rssi(pk_trac2_stn5_epoch(i)) = pk_trac2_stn5_rssi (i);
end
clear pk*
% interpolation
% Trac1
nans = isnan(et_trac1_stn1_rssi);
et_trac1_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn2_rssi);
et_trac1_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn3_rssi);
et_trac1_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn4_rssi);
et_trac1_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac1_stn5_rssi);
et_trac1_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac1_stn5_rssi(~nans), timeincre(nans),'previous');
% Trac2
nans = isnan(et_trac2_stn1_rssi);
et_trac2_stn1_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn1_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn2_rssi);
et_trac2_stn2_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn2_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn3_rssi);
et_trac2_stn3_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn3_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn4_rssi);
et_trac2_stn4_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn4_rssi(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_stn5_rssi);
et_trac2_stn5_rssi(nans) = interp1(timeincre(~nans), et_trac2_stn5_rssi(~nans), timeincre(nans),'previous');
data_rssi_combined (:,1) = et_trac1_stn1_rssi ;
data_rssi_combined (:,2) = et_trac1_stn2_rssi ;
data_rssi_combined (:,3) = et_trac1_stn3_rssi ;
data_rssi_combined (:,4) = et_trac1_stn4_rssi ;
data_rssi_combined (:,5) = et_trac1_stn5_rssi ;
data_rssi_combined (:,6) = et_trac2_stn1_rssi ;
data_rssi_combined (:,7) = et_trac2_stn2_rssi ;
data_rssi_combined (:,8) = et_trac2_stn3_rssi ;
data_rssi_combined (:,9) = et_trac2_stn4_rssi ;
data_rssi_combined (:,10) = et_trac2_stn5_rssi ;
for i = 1: size(data_rssi_combined,1)
data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
+(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
+(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 ....
+(data_rssi_combined (i,4) - data_rssi_combined (i,9))^2 ....
+(data_rssi_combined (i,5) - data_rssi_combined (i,10))^2 );
end
% for i = 1: size(data_rssi_combined,1)
%
%     data_rssi_similar (i)= sqrt((data_rssi_combined (i,1) - data_rssi_combined (i,6))^2 ....
%         +(data_rssi_combined (i,2) - data_rssi_combined (i,7))^2 ....
%         +(data_rssi_combined (i,3) - data_rssi_combined (i,8))^2 );
% end
% downsample
et_trac1_stn1_rssi = downsample (et_trac1_stn1_rssi,60);
et_trac1_stn2_rssi = downsample (et_trac1_stn2_rssi,60);
et_trac1_stn3_rssi = downsample (et_trac1_stn3_rssi,60);
et_trac1_stn4_rssi = downsample (et_trac1_stn4_rssi,60);
et_trac1_stn5_rssi = downsample (et_trac1_stn5_rssi,60);
et_trac2_stn1_rssi = downsample (et_trac2_stn1_rssi,60);
et_trac2_stn2_rssi = downsample (et_trac2_stn2_rssi,60);
et_trac2_stn3_rssi = downsample (et_trac2_stn3_rssi,60);
et_trac2_stn4_rssi = downsample (et_trac2_stn4_rssi,60);
et_trac2_stn5_rssi = downsample (et_trac2_stn5_rssi,60);
data_rssi_similar = downsample (data_rssi_similar,60);
% smooth
et_trac1_stn1_rssi_smooth = smooth (et_trac1_stn1_rssi,setsmooth);
et_trac1_stn2_rssi_smooth = smooth (et_trac1_stn2_rssi,setsmooth);
et_trac1_stn3_rssi_smooth = smooth (et_trac1_stn3_rssi,setsmooth);
et_trac1_stn4_rssi_smooth = smooth (et_trac1_stn4_rssi,setsmooth);
et_trac1_stn5_rssi_smooth = smooth (et_trac1_stn5_rssi,setsmooth);
et_trac2_stn1_rssi_smooth = smooth (et_trac2_stn1_rssi,setsmooth);
et_trac2_stn2_rssi_smooth = smooth (et_trac2_stn2_rssi,setsmooth);
et_trac2_stn3_rssi_smooth = smooth (et_trac2_stn3_rssi,setsmooth);
et_trac2_stn4_rssi_smooth = smooth (et_trac2_stn4_rssi,setsmooth);
et_trac2_stn5_rssi_smooth = smooth (et_trac2_stn5_rssi,setsmooth);
data_rssi_similar_smooth = smooth (data_rssi_similar,setsmooth);
% Correction after smoothing
et_trac1_stn1_rssi_smooth(find(isnan(et_trac1_stn1_rssi)==1)) = nan;
et_trac1_stn2_rssi_smooth(find(isnan(et_trac1_stn2_rssi)==1)) = nan;
et_trac1_stn3_rssi_smooth(find(isnan(et_trac1_stn3_rssi)==1)) = nan;
et_trac1_stn4_rssi_smooth(find(isnan(et_trac1_stn4_rssi)==1)) = nan;
et_trac1_stn5_rssi_smooth(find(isnan(et_trac1_stn5_rssi)==1)) = nan;
et_trac2_stn1_rssi_smooth(find(isnan(et_trac2_stn1_rssi)==1)) = nan;
et_trac2_stn2_rssi_smooth(find(isnan(et_trac2_stn2_rssi)==1)) = nan;
et_trac2_stn3_rssi_smooth(find(isnan(et_trac2_stn3_rssi)==1)) = nan;
et_trac2_stn4_rssi_smooth(find(isnan(et_trac2_stn4_rssi)==1)) = nan;
et_trac2_stn5_rssi_smooth(find(isnan(et_trac2_stn5_rssi)==1)) = nan;
data_rssi_similar_smooth(find(isnan(data_rssi_similar)==1)) = nan;
%% Tracmo Actigraphy
% get data
pk_trac1_row = find(data_load(:,6)==1);
pk_trac2_row = find(data_load(:,6)==2);
pk_trac1_epoch = data_load(pk_trac1_row,1)- epoch_on;
pk_trac2_epoch = data_load(pk_trac2_row,1)- epoch_on;
pk_trac1_x = data_load(pk_trac1_row,9);
pk_trac2_x = data_load(pk_trac2_row,9);
pk_trac1_y = data_load(pk_trac1_row,10);
pk_trac2_y = data_load(pk_trac2_row,10);
pk_trac1_z = data_load(pk_trac1_row,11);
pk_trac2_z = data_load(pk_trac2_row,11);
% remove duplicate
pk_trac1_epochdelta(1) = 999;
pk_trac2_epochdelta(1) = 999;
pk_trac1_epochdelta(2:length(pk_trac1_epoch)) = diff(pk_trac1_epoch);
pk_trac2_epochdelta(2:length(pk_trac2_epoch)) = diff(pk_trac2_epoch);
pk_trac1_xkeep = pk_trac1_x(find(pk_trac1_epochdelta > 0));
pk_trac2_xkeep = pk_trac2_x(find(pk_trac2_epochdelta > 0));
pk_trac1_ykeep = pk_trac1_y(find(pk_trac1_epochdelta > 0));
pk_trac2_ykeep = pk_trac2_y(find(pk_trac2_epochdelta > 0));
pk_trac1_zkeep = pk_trac1_z(find(pk_trac1_epochdelta > 0));
pk_trac2_zkeep = pk_trac2_z(find(pk_trac2_epochdelta > 0));
pk_trac1_epochkeep = pk_trac1_epoch(find(pk_trac1_epochdelta > 0));
pk_trac2_epochkeep = pk_trac2_epoch(find(pk_trac2_epochdelta > 0));
% combine xyz data
pk_trac1_xyz_combined (:,1) = pk_trac1_epochkeep;
pk_trac1_xyz_combined (:,2) = pk_trac1_xkeep;
pk_trac1_xyz_combined (:,3) = pk_trac1_ykeep;
pk_trac1_xyz_combined (:,4) = pk_trac1_zkeep;
pk_trac2_xyz_combined (:,1) = pk_trac2_epochkeep;
pk_trac2_xyz_combined (:,2) = pk_trac2_xkeep;
pk_trac2_xyz_combined (:,3) = pk_trac2_ykeep;
pk_trac2_xyz_combined (:,4) = pk_trac2_zkeep;
% compute actigraphty
pk_trac1_act (1,1) = 0;
pk_trac2_act (1,1) = 0;
for i = 2: size(pk_trac1_xyz_combined,1)
pk_trac1_act (i,1)= sqrt((pk_trac1_xyz_combined (i,2) - pk_trac1_xyz_combined (i-1,2))^2 ....
+(pk_trac1_xyz_combined (i,3) - pk_trac1_xyz_combined (i-1,3))^2 ....
+(pk_trac1_xyz_combined (i,4) - pk_trac1_xyz_combined (i-1,4))^2 );
end
for i = 2: size(pk_trac2_xyz_combined,1)
pk_trac2_act (i,1)= sqrt((pk_trac2_xyz_combined (i,2) - pk_trac2_xyz_combined (i-1,2))^2 ....
+(pk_trac2_xyz_combined (i,3) - pk_trac2_xyz_combined (i-1,3))^2 ....
+(pk_trac2_xyz_combined (i,4) - pk_trac2_xyz_combined (i-1,4))^2 );
end
% create final equal distance time series with all nans
et_trac1_act = nan_template ;
et_trac2_act = nan_template ;
% fill the equal time distance time seties of nans with rssi data
for i = 1:length(pk_trac1_epochkeep)
et_trac1_act(pk_trac1_epochkeep(i)) = pk_trac1_act (i);
end
for i = 1:length(pk_trac2_epochkeep)
et_trac2_act(pk_trac2_epochkeep(i)) = pk_trac2_act (i);
end
clear pk*
% interpolation
nans = isnan(et_trac1_act);
et_trac1_act(nans) = interp1(timeincre(~nans), et_trac1_act(~nans), timeincre(nans),'previous');
nans = isnan(et_trac2_act);
et_trac2_act(nans) = interp1(timeincre(~nans), et_trac2_act(~nans), timeincre(nans),'previous');
% downsample
et_trac1_act = downsample(et_trac1_act,60);
et_trac2_act = downsample(et_trac2_act,60);
% smooth
et_trac1_act_smooth = smooth(et_trac1_act,setsmooth);
et_trac2_act_smooth = smooth(et_trac2_act,setsmooth);
% Correction after smoothing
et_trac1_act_smooth(find(isnan(et_trac1_act)==1)) = nan;
et_trac2_act_smooth(find(isnan(et_trac2_act)==1)) = nan;
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = et_trac1_act
DataPhysio_Act_Cg = et_trac2_act
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_TracmoAct(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_TracmoAct(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_TracmoAct(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Fitbit MET
fitbit_met1_load = xlsread ('BPL Pilot CB_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met2_load = xlsread ('BPL Pilot AK_minuteMETsNarrow_20190704_20190707.csv');
fitbit_met1_smooth = smooth(fitbit_met1_load,setsmooth)
fitbit_met2_smooth = smooth(fitbit_met2_load,setsmooth)
% compute ACT linkage - Tracmo
SetCrossCorrBin =  30
SetCrossCorrLag = 0
SetCrossMethod = 3
DataEnd = length(et_trac1_act)
DataPhysio_Act_Pt = fitbit_met1_smooth
DataPhysio_Act_Cg = fitbit_met2_smooth
for CrossSeed = 1  : (DataEnd - SetCrossCorrBin+1)
% Get the data for analyses (for each moving window)
DataPhysio_CrossCorr_P1_Ori = DataPhysio_Act_Pt(CrossSeed:CrossSeed+SetCrossCorrBin-1);
DataPhysio_CrossCorr_P2_Ori = DataPhysio_Act_Cg(CrossSeed:CrossSeed+SetCrossCorrBin-1);
% Find and remove missing data (crosscorr does not work with missing data)
Array_NanPosition = isnan (DataPhysio_CrossCorr_P1_Ori)+ isnan (DataPhysio_CrossCorr_P2_Ori);
Array_CrossPosition = find (Array_NanPosition == 0);
DataPhysio_CrossCorr_P1_Analysis = DataPhysio_CrossCorr_P1_Ori(Array_CrossPosition);
DataPhysio_CrossCorr_P2_Analysis = DataPhysio_CrossCorr_P2_Ori(Array_CrossPosition);
% Fill the very beginning and end with NaN
NumNanBinStart = round(SetCrossCorrBin/2)-1;
NumNanBinEnd = SetCrossCorrBin - NumNanBinStart -1;
Array_CorssCorr_Fitbit_Met(1:NumNanBinStart) = nan; % <<< Because CrossCorrelation cannot be calculated until we have all samples in the ROI
Array_CorssCorr_Fitbit_Met(DataEnd-NumNanBinEnd+1:DataEnd) = nan;
if size(Array_CrossPosition,1)-1 < SetCrossCorrLag %| nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 | nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
else
if      SetCrossMethod == 1 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod== 2 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = min(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag));
elseif  SetCrossMethod == 3 & SetCrossCorrLag > 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = max(abs(crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,SetCrossCorrLag)));
elseif  SetCrossCorrLag == 0 & size(DataPhysio_CrossCorr_P1_Analysis,1)>1
if  nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)==0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)==0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)>0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)== 0
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart)= nan;
elseif nanstd(DataPhysio_CrossCorr_P1_Analysis)> 0 & nanstd(DataPhysio_CrossCorr_P2_Analysis)> 0
Array_Temp = crosscorr(DataPhysio_CrossCorr_P1_Analysis,DataPhysio_CrossCorr_P2_Analysis,1);
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = Array_Temp (2);
end
clear Array_Temp
else
Array_CorssCorr_Fitbit_Met(CrossSeed+NumNanBinStart) = nan;
end
end
end
%% Trim data (remove MET data when Sbj is not home)
% et_away_trac1 = find(diff(et_trac1_stn1_rssi)== 0)-1;
% et_away_trac2 = find(diff(et_trac2_stn1_rssi)== 0)-1;
%
% % Tracmo RSSI
% et_trac1_stn1_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn2_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn3_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn4_rssi_smooth(et_away_trac1) = nan;
% et_trac1_stn5_rssi_smooth(et_away_trac1) = nan;
%
% et_trac2_stn1_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn2_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn3_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn4_rssi_smooth(et_away_trac2) = nan;
% et_trac2_stn5_rssi_smooth(et_away_trac2) = nan;
%
% data_rssi_similar_smooth (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Tracmo Act
% et_trac1_act_smooth(et_away_trac1) = nan;
% et_trac2_act_smooth(et_away_trac2) = nan;
% Array_CorssCorr_TracmoAct (union(et_away_trac1, et_away_trac2)) = nan;
%
% % Fitbit met
% fitbit_met1_smooth(et_away_trac1) = nan;
% fitbit_met2_smooth(et_away_trac2) = nan;
% Array_CorssCorr_Fitbit_Met (union(et_away_trac1, et_away_trac2)) = nan;
%
%% plots
% Tracmo RSSI %%%%%%%%%%%%%
subplot(9,1,1)
plot_trac1_stn1 = plot(dayincre,et_trac1_stn1_rssi_smooth); hold on;
plot_trac1_stn2 = plot(dayincre,et_trac1_stn2_rssi_smooth); hold on;
plot_trac1_stn3 = plot(dayincre,et_trac1_stn3_rssi_smooth); hold on;
plot_trac1_stn4 = plot(dayincre,et_trac1_stn4_rssi_smooth); hold on;
plot_trac1_stn5 = plot(dayincre,et_trac1_stn5_rssi_smooth); hold on;
plot_trac1_stn1.Color = 'red'; hold on;
plot_trac1_stn2.Color = 'green'; hold on;
plot_trac1_stn3.Color = 'blue'; hold on;
plot_trac1_stn4.Color = 'cyan'; hold on;
plot_trac1_stn5.Color = 'magenta'; hold off;
subplot(9,1,2)
plot_trac2_stn1 = plot(dayincre,et_trac2_stn1_rssi_smooth); hold on;
plot_trac2_stn2 = plot(dayincre,et_trac2_stn2_rssi_smooth); hold on;
plot_trac2_stn3 = plot(dayincre,et_trac2_stn3_rssi_smooth); hold on;
plot_trac2_stn4 = plot(dayincre,et_trac2_stn4_rssi_smooth); hold on;
plot_trac2_stn5 = plot(dayincre,et_trac2_stn5_rssi_smooth); hold on;
plot_trac2_stn1.Color = 'red'; hold on;
plot_trac2_stn2.Color = 'green'; hold on;
plot_trac2_stn3.Color = 'blue'; hold on;
plot_trac2_stn4.Color = 'cyan'; hold on;
plot_trac2_stn5.Color = 'magenta'; hold off;
subplot(9,1,3)
plot_similar = plot(dayincre,data_rssi_similar_smooth); hold on;
plot_similar.Color = 'black'; hold off;
% Tracmo Act %%%%%%%%%%%%%
subplot(9,1,4)
plot_trac1_act = plot(dayincre,et_trac1_act_smooth); hold on;
plot_trac1_act.Color = 'blue'; hold off;
subplot(9,1,5)
plot_trac2_act = plot(dayincre,et_trac2_act_smooth); hold on;
plot_trac2_act.Color = 'cyan'; hold off;
subplot(9,1,6)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_TracmoAct)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Fitbet MET %%%%%%%%%%%%%
subplot(9,1,7)
plot_fitbit1_act = plot(dayincre,fitbit_met1_smooth); hold on;
plot_fitbit1_act.Color = 'blue'; hold off;
subplot(9,1,8)
plot_fitbit2_act = plot(dayincre,fitbit_met2_smooth); hold on;
plot_fitbit2_act.Color = 'cyan'; hold off;
subplot(9,1,9)
plot_trac12_actlink = area(dayincre,(Array_CorssCorr_Fitbit_Met)); hold on;
plot_trac12_actlink.FaceColor = 'red'; hold on;
plot_trac12_actlink.EdgeColor= 'red'; hold off;
% Output
for i = 1:5
for j = 1:24
for k = 1:60
timelog_dd (((i-1)*1440)+((j-1)*60)+k) = i;
timelog_hh (((i-1)*1440)+((j-1)*60)+k) = j-1;
timelog_mm (((i-1)*1440)+((j-1)*60)+k) = k-1;
end
end
end
Output(:,1) = timelog_dd
Output(:,2) = timelog_hh
Output(:,3) = timelog_mm
Output(:,4) = data_rssi_similar
Output(:,5) = Array_CorssCorr_TracmoAct
Output(:,6) = Array_CorssCorr_Fitbit_Met
Output(:,7) = et_trac2_act
Output(:,8) = et_trac2_act
Output(:,9) = fitbit_met1_smooth
Output(:,10) = fitbit_met2_smooth
xlswrite ('Output',Output)
save workspace
%-- 8/8/2019 8:56 AM --%
run('G:\emodynamics\scripts\SBJ05ab_HFA_corr.m')
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
clear
clc
root_dir
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
root_dir
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ = 'IR51';
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
an_id
an.evnt_lab
%% Preprocessing Pipeline
% This script should be run in sections. Functions/scripts with the SBJ##
% prefix can be run automatically, and all other sections should be
% manually editted for each dataset.
clear all; close all;
%% Check which root directory
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set Up Directories
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Step 0 - Processing Variables
SBJ = 'IR51';
proc_id = 'main_ft';
eval(['run ' fullfile(root_dir,'emodynamics','scripts','proc_vars',[proc_id '_vars.m'])]);
%% ========================================================================
%   Step 1- Load SBJ and Processing Variable Structures
%  ========================================================================
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars',[SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_ids = {'crEKG_MR_wl15k_ws2k','crRat_MR_wl15k_ws2k'};%'crEKG_MR_wl1k_ws1k','crEKG_MR_wl5k_ws1k','crEKG_MR_wl10k_ws1k','crEKG_MR_wl10k_ws2k',...'crEKG_MR_wl30k_ws3k',...
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_ids
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
an_id
stat_id
Undefined function or variable 'stat_id'.
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_ids '_vars.m'])];
eval(stat_vars_cmd);
stat_ids
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
stat_ids = {'crEKG_MR_wl15k_ws2k','crRat_MR_wl15k_ws2k'};%'crEKG_MR_wl1k_ws1k','crEKG_MR_wl5k_ws1k','crEKG_MR_wl10k_ws1k','crEKG_MR_wl10k_ws2k',...'crEKG_MR_wl30k_ws3k',...
%             'crRat_MR_wl1k_ws1k','crRat_MR_wl5k_ws1k','crRat_MR_wl10k_ws1k','crRat_MR_wl10k_ws2k'};%,'crRat_MR_wl30k_ws3k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
stat_ids
st_ix
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_ids '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
stat_id
stat_ids
stat_id = crRat_MR_wl15k_ws2k
stat_id = 'crRat_MR_wl15k_ws2k'
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
hfa_fname
an_id
hfa_fname
strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat')
load('IR51_trial_info.mat')
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
[SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']
load('IR51_bad_epochs_preproc.mat')
load('IR51_bad_epochs_preclean.mat')
load('IR51_bad_epochs_preproc.mat')
[SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
ekg
trial_info.trial_offsets
trial_info.trial_onsets
max_trl_len
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
max_trl_len
(trial_info.trial_offsets-trial_info.trial_onsets)
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];
cfgs.trl
trial_info.trial_onsets
trial_info.trial_onsets+max_trl_len
cfgs.trl
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
st.model_lab
root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat')
root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
root_dir
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
ft_redefinetrial
cov
help ft_redefinetrial
cfgs
cov
cov = ft_redefinetrial(cfgs, cov);
cfgs
m_ix
numel(trial_info.video_id)
cov.trial
plot(cov.trial{1, 1})
m_ix = 1
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
export_normative
export_normative{m_ix}
aaa = export_normative
aaa = export_normative{1}
plot(aaa)
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
st.model_lab
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
cfg_trim = [];
cfg_trim.trials = 'all';
times.bsln_len
run('G:\emodynamics\scripts\timing_vars.m')
cfg_trim = [];
cfg
cfgs
cfg_trim = [];
cfg_trim.trials = 'all';
help cfg.trim
cfg_trim.latency = [0.0 times.bsln_len];
help ft_selectdata
cfg_trim.trials = 'all';
cfg_trim
hfa
cov
hfa.time
cfg_trim = [];
cfg_trim.trials = 'all';
hfa
hfa.powspctrm
fn_sliding_window_lim
bsln_hfa.powspctrm
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
bsln_hfa.powspctrm
size(bsln_hfa.powspctrm)
b = squeeze(bsln_hfa.powspctrm
b = squeeze(bsln_hfa.powspctrm)
b = squeeze(bsln_hfa.powspctrm);
size(b)
size(bsln_hfa.powspctrm)
c=  squeeze(bsln_hfa.powspctrm(1,1,1,:)
c=  squeeze(bsln_hfa.powspctrm(1,1,1,:))
size(bsln_hfa.powspctrm)
squeeze(bsln_hfa.powspctrm(1,1,1,:))
round(st.win_len*trial_info.sample_rate)
round(st.win_step*trial_info.sample_rate)
st.win_len
trial_info.sample_rate
st.win_step
trial_info.sample_rate
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_lim
bsln_hfa.label
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
win_lim
mean(win_lim,2)
mean(win_lim)
mean(win_lim,2)
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.time
size(bsln_hfa.powspctrm,1)
bsln_hfa.powspctrm
size(bsln_hfa.powspctrm)
size(bsln_hfa.powspctrm,2)
size(win_lim,1)
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.r2
size(bsln_hfa.powspctrm)
size(bsln.r2)
bsln.win_lim   = win_lim;
bsln_hfa.time
size(bsln_hfa.time)
bsln.time
round(mean(win_lim,2))
bsln.time
bsln_hfa.time(
bsln_hfa.time
size(bsln_hfa.time)
bsln_hfa.time
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.win_lim_s
bsln.win_lim
trial_info.video_id
size(bsln.time,1)
bsln.thresh    = nan(size(bsln.label));
size(bsln.label)
bsln.thresh    = nan(size(bsln.label));
size(bsln.r2 )
win_lim
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
fprintf('Building baseline distribution...\n\t');
numel(bsln_hfa.label)
ch_ix
ch_ix = 1
fprintf('%d..',ch_ix);
ch_ix
mod
mod(ch_ix,30)==0
mod(ch_ix,30)
ch_ix
numel(trial_info.video_id)
ch_ix
numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
help mod
ch_ix
numel(bsln_hfa.label)
bsln_vals = [];
%-- 8/9/2019 9:27 AM --%
clear
clc
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
SBJ - 'IR51'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
SBJ = 'IR51'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
an_id = 'HGm_zscB30_sm0_wn250';
stat_id = {'crEKG_MR_wl15k_ws2k'}
stat_id = 'crEKG_MR_wl15k_ws2k'
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_lim
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
ch_ix = 1
numel(bsln_hfa.label)
bsln_vals = [];
m_ix = 1
w_ix = 1
bsln_cov
bsln_cov.trial
win_lim(w_ix,1)
size(win_lim,1)
bsln_cov.trial{m_ix}
queeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))'
squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))'
squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)))
tmp = corrcoef(hfa_data,cov_data);
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
tmp = corrcoef(hfa_data,cov_data);
tem
tmp
xcorr(hfa_data,cov_data)
xcorr(hfa_data,cov_data,)
xcorr(hfa_data,cov_data,5)
xcorr(5,hfa_data,cov_data)
crosscorr(cov_data, hfa_data,5)
temp => crosscorr(cov_data, hfa_data,5)
temp = crosscorr(cov_data, hfa_data,5)
tmp
length(cov_data)
length(cov_data, 5000)
temp = crosscorr(cov_data, hfa_data,5000)
crosscorr(cov_data, hfa_data,5000)
tmp = corrcoef(hfa_data,cov_data);
m_ix
ch_ix
w_ix
hfa_data
cov.trial
cov.trial{m_ix}
aaa = cov.trial{m_ix}
area(aaa)
plot(aaa)
export_normative{m_ix}
bbb= export_normative{m_ix}
plot(aaa,'DisplayName','aaa')
m_ix
ch_ix
w_ix
tmp(1,2)
st.win_lag = 5.0;
tmp = crosscorr(hfa_data,cov_data, );
trial_info.sample_rate
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp
length(tmp)
help midpoint
a = [1,2,3,4,5,6,7,8,9]
b = midpoint(a)
length(tmp)-1)/2
(length(tmp)-1)/2
length(tmp)
length(tmp)-1)/2)
tmp((length(tmp)+1)/2)
max(tmp((length(tmp)+1)/2):end)
nanmax(tmp((length(tmp)+1)/2):end)
max(a)
tmp((length(tmp)+1)/2):end)
(tmp((length(tmp)+1)/2):end)
tmp((length(tmp)+1)/2)
length(tmp)+1)/2)
(length(tmp)+1)/2)
max(tmp(5000:end)
max(tmp(5000:end))
(length(tmp)+1)/2
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.r2(m_ix,ch_ix,w_ix)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals bsln.r2(m_ix,ch_ix,w_ix) ];
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals bsln.r2(m_ix,ch_ix,w_ix) ];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
error('Why analyze just baseline? cant test bsln vs. bsln...');
st.evnt_lab
cfg_trim
times.bsln_len
times.bsln_len+max(times.movie_len)
max(times.movie_len)
cfg_trim.latency(1) = 0;
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
cfg_trim.latency(1) = 0;
numel(times.movie_len)
time_idx
hfa_stat.time
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
hfa_stat.time
times.bsln_len
times.movie_len
trial_info.video_id(m_ix)
m_ix
time_idx
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
time_idx
plot(time_idx)
hfa_stat.time
plot(hfa_stat.time)
cfg_trim.latency(1) = 0;
cfg_trim
size(hfa)
hfa_stat = ft_selectdata(cfg_trim,hfa);
size(hfa_stat)
size(hfa.powspctrm)
numel(times.movie_len)
trial_info.video_id(m_ix)
time_idx
hfa_stat.time
times.bsln_len+times.movie_len(trial_info.video_id(m_ix))
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
plot(time_idx)
m_ix
m_ix = 1
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
plot(time_idx)
size(hfa_stat.powspctrm)
m_ix
(hfa_stat.powspctrm,2)
size(hfa_stat.powspctrm,2)
sum(time_idx)
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan
size(hfa_stat.powspctrm)
size(hfa_stat.powspctrm,2)
nan([size(hfa_stat.powspctrm,2) sum(time_idx)])
times.bsln_len
hfa.time(end)
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
trial_info.video_id
hfa_stat.time
bsln_len+times.movie_len
times.bsln_len+times.movie_len
hfa_stat.time
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
size(time_idx)
time_idx
hfa_stat.time
cfg_trim.latency = [times.bsln_len hfa.time(end)];
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
figure;plot(hfa.powspctrm(1,1,1,:))
figure;plot(squeeze(hfa.powspctrm(1,1,1,:)))
figure;plot(squeeze(hfa.powspctrm(8,1,1,:)))
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
cfg_trim.latency(1) = 0;
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
cfg_trim.latency(1) = 0;
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
m_ix
hfa_stat.time
cfg_trim
hfa_stat.time
times.bsln_len
times.movie_len(trial_info.video_id(m_ix))
times.bsln_len+times.movie_len(trial_info.video_id(m_ix))
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
length(hfa_stat.time)
length(time_idx)
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
cfg_trim
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
hfa_stat.time
plot(hfa_stat.time)
time_idx
times.bsln_len
times.movie_len(trial_info.video_id(m_ix))
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
size(time_idx)
time_idx
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
plot(time_idx)
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
hfa_stat.time
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
%-- 8/12/2019 12:55 PM --%
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
SBJ='IR51'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
an_id = 'crRat_MR_wl15k_ws2k_lg5k_vars.m'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
run('G:\emodynamics\scripts\an_vars\HGm_zscB30_sm0_wn250_vars.m')
an_id = 'HGm_zscB30_sm0_wn250';
an_id = 'HGm_zscB2t3_sm4_wn250_vars';
stat_ids = 'crRat_MR_wl15k_ws2k_lg5k_vars.m'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
an_id = 'HGm_zscB2t3_sm4_wn250_vars';
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
an_id = 'HGm_zscB30_sm0_wn250';
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_ids = 'crRat_MR_wl15k_ws2k_lg5k_vars'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_id
stat_ids
stat_id = 'crRat_MR_wl15k_ws2k_lg5k_vars'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
stat_id = 'crRat_MR_wl15k_ws2k_lg5k_vars'
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
stat_id = 'crRat_MR_wl15k_ws2k_lg5k_vars.m'
eval(stat_vars_cmd);
% Parameters for HFA actvation vs. baseline
st.model_lab = 'crRat';
st.trial_cond  = {'all'};
st.evnt_lab = 'MR';
st.stat_lim = 'all';
%st.n_boots  = 1000;
st.win_len  = 15.0;
st.win_step = 2.0;
st.alpha    = 0.05;
st.win_lag = 5.0;
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
st.evnt_lab
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Times of trial elements (in sec)
% Time for baseline fixation
times.bsln_len = 32;
% Time for movies in sec (Lucy is +5s)
times.movie_len = [90.133 90.067 90.133 90.067 90.133 90.033 90.133 94.7];
% Time for recovery (neutral) movie
times.recov_len = 32.033;
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
win_lim
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_lim
win_center = round(mean(win_lim,2));
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
win_center
corr.time      = hfa_stat.time(win_center);
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
1:size(win_lim,1)
size(win_lim,1)
cov_stat.trial
m_ix
size(cov_stat.trial)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
bsln_vals
size(bsln_vals)
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
size(win_lim,1)
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
clear
clc
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
stat_id = 'crEKG_MR_wl15k_ws2k'
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
strcmp
st.model_lab
st.model_lab = 'crRat'
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_lim
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
stat_id = 'crRat_MR_wl15k_ws2k_lg5k'
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
bsln_vals
size(bsln_vals)
win_lim
size(bsln_vals)
size(win_lim)
bsln_sort = sort(abs(bsln_vals),'descend');
plot(bsln_sort)
bsln_sort
round(numel(bsln_sort)*st.alpha
st.alpha
round(numel(bsln_sort)*st.alpha)
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
ch_ix
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp((length(tmp)+1)/2:end))];
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
bsln.thresh
size(bsln.thresh)
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
win_lim
size(bsln.thresh)
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
size(hfa_stat.powspctrm,1)
size(hfa_stat.powspctrm,2)
size(win_lim,1)
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
size(corr.r2 )
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
win_lim
size(win_lim)
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
numel(trial_info.video_id)
numel(hfa_stat.label)
size(win_lim,1)
cov_stat.trial
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
size(cov_data)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
corr.r2(m_ix,ch_ix,w_ix) = max(tmp((length(tmp)+1)/2:end));
tmp
plot(tmp)
max(tmp((length(tmp)+1)/2:end))
m_ix
ch_ix
find(temp = max(tmp((length(tmp)+1)/2:end)))
find(temp == max(tmp((length(tmp)+1)/2:end)))
find(tmp == max(tmp((length(tmp)+1)/2:end)))
plot(tmp)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
plot(tmp)
hfa_data = [1,2,3,4,5,6,7,8,9,10]
cov_data = [1,1,1,1,1,1,2,3,4,5]
crosscorr (hfa_data,cov_data)
hfa_data = [1,2,3,4,5,5,5,5,5,5]
cov_data = [1,1,1,1,1,1,2,3,4,5]
crosscorr (hfa_data,cov_data)
plot(hfa_data,'DisplayName','hfa_data');hold on;plot(cov_data,'DisplayName','cov_data');hold off;
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
plot(hfa_data,'DisplayName','hfa_data');hold on;plot(cov_data,'DisplayName','cov_data');hold off;
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
plot(tmp)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
max(tmp((length(tmp)+1)/2:end))
crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
max(tmp)
max(tmp((length(tmp)+1)/2:end))
a = [1,1,1,1,1,1,1,1,1,2,2,1,1]
a = [1,1,1,1,1,1,1,1,1,2,2,1,1,1]
b= []
crosscorr(a,b)
subplot(2,1,1)
subplot(3,1,1)
plot(a)
subplot(3,1,2)
plot(b)
subplot(3,1,3)
crosscorr(a,b)
a1=b
b1_brain = 1
brain = b
rate = a
crosscorr(brain,beh)
crosscorr(brain,rate)
subplot(3,1,1)
plot(brain)
subplot(3,1,1)
plot(brain)
subplot(3,1,2)
plot(rate)
crosscorr(brain,rate)
plot(rate)
subplot(3,1,3)
crosscorr(brain,rate)
rate
subplot(3,1,3)
crosscorr(brain,rate)
crosscorr(brain,rate,10)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
length()
length(tmp)
length(tmp)+1)/2
(length(tmp)+1)/2
length(tmp)-1)
(length(tmp)-1)/2
length(tmp)-1)
tmp (1:tmp((length(tmp)-1)/2))=[];
plot(tmp)
length(length(tmp)-1))
length(tmp)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:tmp((length(tmp)-1)/2))=[];
length(tmp)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
length(tmp)
(length(tmp)-1)/2
(length(tmp)-1)/2)
tmp (1:(length(tmp)-1)/2)=[];
length(tmp)
area(brain)
plot(brain)
plot(tmp)
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max();
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(temp == max(tmp((length(tmp)+1)/2:end)));
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
find(temp == max(tmp))
find(tmp == max(tmp))
plot(tmp)
corr.max_ix (m_ix,ch_ix,w_ix)= find(temp == max(tmp));
corr.max_ix (m_ix,ch_ix,w_ix)= find(temp == max(tmp)));
find(temp == max(tmp))
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
bsln.r2
size(bsln.r2)
ch_ix
numel(trial_info.video_id)
bsln.max_ix
bsln.r2
bsln_sort
size(bsln_sort)
bsln.thresh
numel(trial_info.video_id)
size(bsln_vals)
bsln.r2
size(bsln.r2)
a1 = bsln.r2(1,:,:)
a2 = bsln.r2(2,:,:)
a3 = bsln.r2(3,:,:)
a4 = bsln.r2(4,:,:)
a5 = bsln.r2(5,:,:)
a6 = bsln.r2(6,:,:)
a7 = bsln.r2(7,:,:)
bsln.r2
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
size(bsln_vals)
bsln_vals(isnan(bsln_vals)) = [];
bsln_vals
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
plot(tmp)
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals
plot(bsln_vals)
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
m_ix
ch_ix
w_ix
size(win_lim,1)
bsln_vals
1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals))
numel(bsln_vals)
(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals))
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals))
corr.r2(m_ix,ch_ix,w_ix)
corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
size(win_lim,1)
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
sig_mat
sig_mat = zeros([numel(corr.label) numel(trial_info.video_id)]);
numel(corr.label)
numel(trial_info.video_id)
size(sig_mat)
numel(trial_info.video_id)
numel(corr.label)
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
% Consolidate to binary sig/non-sig
if any(squeeze(corr.mask(m_ix,ch_ix,:)))
sig_mat(ch_ix,m_ix) = sum(squeeze(corr.mask(m_ix,ch_ix,:)));
%             % Flag whether positive or negative
%             sig_idx = squeeze(corr.qval(m_ix,ch_ix,:))<=st.alpha;
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))>0)
%                 sig_mat(m_ix,ch_ix,2) = 1;
%             end
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))<0)
%                 sig_mat(m_ix,ch_ix,3) = 1;
%             end
end
end
end
sig_mat
size(corr.mask)
sig_mat
spectrogram(tmp)
spectrogram(tmp)
spectrogram(tmp)
spectrogram(tmp)
contour(sig_mat)
contourf(sig_mat)
pcolor(sig_mat)
imagesc(sig_mat)
image(sig_mat)
imshow(sig_mat)
heatmap(sig_mat);
bsln.r2
size(bsln.r2)
size(corr.r2)
m_ix
ch_ix
numel(trial_info.video_id)
size(corr.r2)
win_lim
corr.r2(m_ix,ch_ix, :)
m_ix
m_ix=1
ch_ix
ch_ix=1
corr.r2(m_ix,ch_ix, :)
corr.label
p_ix = 1
p_ix = 1
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
subplot(20,4,p_ix)
plot(corr.r2(m_ix,ch_ix, :))
end
end
plot(corr.r2(m_ix,ch_ix, :))
plot(squeeze(corr.r2(m_ix,ch_ix, :))))
plot(squeeze(corr.r2(m_ix,ch_ix, :)));
p_ix = 1
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
subplot(20,4,p_ix)
plot(squeeze(corr.r2(m_ix,ch_ix, :)));
end
end
end
p_ix = 1
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
subplot(20,4,p_ix)
plot(squeeze(corr.r2(m_ix,ch_ix, :)));
end
end
p_ix = 1
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
subplot(20,4,p_ix)
plot(squeeze(corr.r2(m_ix,ch_ix, :)));
p_ix = p_ix+1
end
end
fn_elec_import_orig(SBJ,'main_ft','pat','',1);
SBJ
fn_elec_import_orig(SBJ,'main_ft','pat','',1);
elec_fname = eval(['SBJ_vars.recon.elec_' view_space reg_suffix]);
% Set up paths
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
proc_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','proc_vars', [proc_id '_vars.m'])];
eval(proc_vars_cmd);
fn_elec_import_orig(SBJ,'main_ft','pat','',1);
%-- 8/13/2019 11:51 AM --%
clear
clc
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
stat_id = {'crEKG_MR_wl15k_ws2k',
clear
clc
SBJ = 'IR51';
stat_id = 'crRat_MR_wl15k_ws2k_lg5k';
an_id = 'an_id'
an_id = 'HGm_zscB2t3_sm4_wn250'
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
fn_elec_import_orig(SBJ,'main_ft','pat','',1);
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
st.model_lab
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
p_ix = 1
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
subplot(20,4,p_ix)
plot(squeeze(corr.r2(m_ix,ch_ix, :)));
p_ix = p_ix+1
end
end
numel(trial_info.video_id)
m_ix
ft_databrowser(cfg_hfa, hfa)
cfg_plot
fn_load_elec_orig
SBJ_vars.dirs.preproc
SBJ_vars.dirs.recon
load([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
{}=xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
aaa{}=xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
{aaa}=xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
[a1, a2, a3] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
['', '', region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
[,,region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
['','',region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
[num,txt,region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
elec.region = region_level(2:81,13)
length(elec.region)
length(elec)
length(elec.label)
elec.region = region_level(2:length(elec.label)+1,13)
size(corr.r2)
corr.r2
cfg_trim
ft_dataselect
help ft_selectdata
size(corr.r2)
ft_databrowser(cfg_hfa,corr)
corr2  = corr
corr2.label = elec.region
corr2  = corr
corr2.trial = 'all'
corr2.label = 'AMG'
ft_selectdata (cfg_corr2, corr2)
corr2  = corr
cfg_corr2.trial = 'all'
cfg_corr2.label = 'AMG'
ft_selectdata (cfg_corr2, corr2)
corr2  = corr
cfg_corr2.trial = 'all'
cfg_corr2.channel = 'AMG'
ft_selectdata (cfg_corr2, corr2)
cfg_corr2.trial = 'all'
corr2  = corr;
cfg_corr2.trial = 'all' ;
cfg_corr2.channel = 'AMG' ;
ft_selectdata (cfg_corr2, corr2)
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
corr2  = corr;
cfg_corr2.trial = 'all' ;
cfg_corr2.channel = 'AMG' ;
ft_selectdata (cfg_corr2, corr2)
corr2  = corr;
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'AMG' ;
ft_selectdata (cfg_corr2, corr2)
corr2  = corr;
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'all' ;
ft_selectdata (cfg_corr2, corr2)
corr2  = corr;
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'AMG' ;
ft_selectdata (cfg_corr2, corr2)
a = ft_selectdata (cfg_corr2, corr2)
corr2  = corr;
corr2.label = elec.region
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'AMG' ;
a = ft_selectdata (cfg_corr2, corr2)
corr2  = corr;
corr2.label = elec.region
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'all' ;
a = ft_selectdata (cfg_corr2, corr2)
corr2
corr2  = corr;
corr2.label = elec.region
cfg_corr2.trials = 'all' ;
cfg_corr2.label = 'all' ;
a = ft_selectdata (cfg_corr2, corr2)
[num,txt,region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']);
elec.gROI = region_level(2:length(elec.label)+1,13)
corr2  = corr;
corr2.label = elec.gROI
cfg_corr2.trials = 'all' ;
cfg_corr2.channel = 'all' ;
elec.label
corr.label
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
[num,txt,region_level] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num txt;
[num,txt,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num txt;
elec.gROI = region_label(2:length(elec.label)+1,13)
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
corr.gROI = elec.gROI;
corr.gROI
numel(roi_labels)
roi_labels = {'MPFC','LPFC','AMG'};
numel(roi_labels)
roi_lab = roi_labels{roi_ix};
numel(roi_labels)
roi_labels = {'MPFC','LPFC','AMG'};
roi_labels = (2:length(elec.label)+1,15)
[num,txt,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num txt;
elec.gROI = region_label(2:length(elec.label)+1,13)
roi_labels = (2:length(elec.label)+1,15)
elec.gROI = region_label(2:length(elec.label)+1,13)
length(elec.label)
roi_labels = (2:length(elec.label)+1,15)
roi_labels = region_label (2:length(elec.label)+1,15)
roi_labels (isnan(roi_labels))= [];
roi_labels (find(roi_labels=='roi_labels'))= [];
roi_labels = region_label (2:length(elec.label)+1,15);
strcmp(roi_labels,'nan')
strcmp(roi_labels,'NAN')
strcmp(roi_labels,'NaN')
roi_labels
strcmp(roi_labels,' NaN')
roi_labels
strcmp(roi_labels,' NaN')
strcmp(roi_labels,NaN)
nan(roi_labels)
isnan(roi_labels)
aaa= isnan(roi_labels)
roi_labels(isnan(roi_labels))
roi_labels{isnan(roi_labels))}
roi_labels{isnan(roi_labels)}
roi_labels(isnan(roi_labels))
roi_labels (find(roi_labels=='roi_labels'))= [];
roi_labels = region_label (2:length(elec.label)+1,15);
strcmp(elec.label,'NaN')
strcmp(elec.label,' NaN')
strcmp(elec.label,'  NaN')
unique(roi_labels)
unique{roi_labels}
S = {'John' 'Sue' 'Nick' 'John' 'Campion' 'John' 'Jason'};
U = matlab.lang.makeUniqueStrings(S)
U = matlab.lang.makeUniqueStrings(elec.label,excludedStrings)
U = matlab.lang.makeUniqueStrings(elec.label,' NaN')
U = matlab.lang.makeUniqueStrings(roi_labels,' NaN')
U = matlab.lang.makeUniqueStrings(roi_labels)
roi_labels
U = matlab.lang.makeUniqueStrings(roi_labels)
roi_labels = region_label (2:length(elec.label)+1,15);
U = matlab.lang.makeUniqueStrings(roi_labels{})
U{} = matlab.lang.makeUniqueStrings(roi_labels)
elec.label
strcmp(elec.label,'  NaN')
strcmp(roi_labels,'  NaN')
strcmp(roi_labels,'NaN')
strcmp(roi_labels,'OFC')
strcmp(roi_labels,'')
strcmp(roi_labels,'[NaN]')
[num,txt,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
txt
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
region_label
roi_labels = region_label (2:length(elec.label)+1,15);
roi_labels
size(roi_labels)
size(region_label)
strcmp(roi_labels,'')
roi_labels(find(strcmp(roi_labels,'')==1))=[];
roi_labels
numel(corr.label)
numel(trial_info.video_id)
a = [1,2,3,4,5]
a = [1,2,3,4,5;2,3,4,5,6;3,2,3,2,1]
plot(a)
plot(a')
numel(trial_info.video_id)
numel(corr.label)
corr.gROI
ch_ix
numel(corr.label
numel(corr.label)
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
corr.gROI = elec.gROI;
numel(loi_labels)
numel(corr.label)
numel(loi_labels)
corr.gROI
loi_labels(1)
strcmp(corr.gROI,loi_labels(1))
plot(squeeze(corr.r2(m_ix,ch_ix, :)))
tmp_ix = 1
numel(corr.label)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI,loi_labels(lb_ix))
tmp(:,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :)));
end
end
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI,loi_labels(lb_ix))
tmp(:,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
end
end
end
tmp
size(tmp)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI,loi_labels(lb_ix))
tmp(:,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
end
tmp_ix = tmp_ix+1
end
end
size(tmp)
(corr.r2(m_ix,ch_ix, :))
squeeze(corr.r2(m_ix,ch_ix, :))
size(squeeze(corr.r2(m_ix,ch_ix, :)))
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI,loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
end
tmp_ix = tmp_ix+1
end
end
size(tmp)
tmp_ix = 1
lb_ix
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
end
tmp_ix = tmp_ix+1
end
end
size(tmp)
size(corr.r2)
clear tmp
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
end
tmp_ix = tmp_ix+1
end
end
size(tmp)
clear tmp
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1
end
end
end
size(tmp)
%-- 8/14/2019 2:15 PM --%
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
stat_ids = {'crEKG_MR_wl15k_ws2k','crRat_MR_wl15k_ws2k'};%'crEKG_MR_wl1k_ws1k','crEKG_MR_wl5k_ws1k','crEKG_MR_wl10k_ws1k','crEKG_MR_wl10k_ws2k',...'crEKG_MR_wl30k_ws3k',...
%             'crRat_MR_wl1k_ws1k','crRat_MR_wl5k_ws1k','crRat_MR_wl10k_ws1k','crRat_MR_wl10k_ws2k'};%,'crRat_MR_wl30k_ws3k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
an_id = 'crRat_MR_wl15k_ws2k_lg5k'
stat_id = 'crRat_MR_wl15k_ws2k_lg5k'
an_id = HGm_zscB2t3_sm4_wn250_ds250
an_id = 'HGm_zscB2t3_sm4_wn250_ds250'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
%% Print results
% Compile positive and negative stats
sig_mat = zeros([numel(corr.label) numel(trial_info.video_id)]);
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
% Consolidate to binary sig/non-sig
if any(squeeze(corr.mask(m_ix,ch_ix,:)))
sig_mat(ch_ix,m_ix) = sum(squeeze(corr.mask(m_ix,ch_ix,:)));
%             % Flag whether positive or negative
%             sig_idx = squeeze(corr.qval(m_ix,ch_ix,:))<=st.alpha;
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))>0)
%                 sig_mat(m_ix,ch_ix,2) = 1;
%             end
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))<0)
%                 sig_mat(m_ix,ch_ix,3) = 1;
%             end
end
end
end
% Prep report
sig_report_fname = [hfa_fname(1:end-4) '_' stat_id '_sig_report.txt'];
if exist(sig_report_fname)
system(['mv ' sig_report_fname ' ' sig_report_fname(1:end-4) '_bck.txt']);
end
sig_report = fopen(sig_report_fname,'a');
result_str = ['%-10s' repmat('%-10i',[1 numel(trial_info.video_id)]) '\n'];
% Print header
fprintf(sig_report,'%s (n = %i)\n',SBJ,numel(corr.label));
fprintf(sig_report,['%-10s' repmat('%-10d',[1 numel(trial_info.video_id)]) '\n'],'label',trial_info.video_id);
% Print summary lines (absolute)
fprintf(sig_report,result_str, 'count', sum(sig_mat>0,1));
fprintf(sig_report,strrep(result_str,'i','.3f'), 'percent',...
sum(sig_mat>0,1)./numel(corr.label));
% Print Channel Lines
for ch_ix = 1:numel(corr.label)
% Report on significant electrodes for this SBJ
fprintf(sig_report,result_str,corr.label{ch_ix},sig_mat(ch_ix,:));
end
fclose(sig_report);
%% Save Results
out_fname = strcat(hfa_fname(1:end-4),'_',stat_id,'.mat');
fprintf('===================================================\n');
fprintf('--- Saving %s ------------------\n',out_fname);
fprintf('===================================================\n');
save(out_fname,'-v7.3','corr','bsln','bsln_cov','cov_stat','st','sig_mat');
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
IR51_ROI_HGm_zscB2t3_sm4_wn250
an_id = 'HGm_zscB2t3_sm4_wn250_vars'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
an_id = 'HGm_zscB2t3_sm4_wn250'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
region_label
elec.gROI = region_label(2:length(elec.label)+1,13);
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
elc_fname
load(elc_fname);
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
elec.gROI
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels
loi_labels(find(strcmp(loi_labels,'')==1))=[];
loi_labels
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
corr.gROI = elec.gROI;
corr.gROI = elec.gROI;
clear tmp
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1
end
end
end
end
size(tmp)
plot(tmp(:,1,1))
plot(tmp(:,:,1))
plot(tmp(:,:,2))
plot(tmp(:,:,3))
plot(tmp(:,:,2))
loi_labels
plot(tmp(1,:,2))
numel(trial_info.video_id)
corr.gROI = elec.gROI;
clear tmp
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1
end
end
end
end
size(tmp_ix)
size(tmp)
plot(tmp(:,:,:,1))
plot(tmp(:,:,1,1))
plot(tmp(:,:,2,1))
plot(tmp(:,:,3,1))
plot(tmp(:,:,4,1))
length(loi_labels)
subplot(1,length(loi_labels)+1,1)
subplot(length(loi_labels)+1,1,1)
for m_ix = 1:numel(trial_info.video_id)
subplot(length(loi_labels)+1,1,1)
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1)
plot(tmp(:,:,lb_ix, m_ix)
end
end
subplot(length(loi_labels)+1,1,1);
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1)
plot(tmp(:,:,lb_ix, m_ix));
end
bsln.thresh
154-60
size(corr.r2 )
win_lim
size(fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');)
size(win_lim)
cov
cov.trial{m_ix}
size(cov.trial{m_ix})
size(cov.trial)
cov_stat
m_ix = 8
subplot(length(loi_labels)+1,1,1);
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1)
plot(tmp(:,:,lb_ix, m_ix));
end
m_ix = 2
subplot(length(loi_labels)+1,1,1);
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1)
plot(tmp(:,:,lb_ix, m_ix));
end
figure
for m_ix = 1:numel(trial_info.video_id)
figure;
subplot(length(loi_labels)+1,1,1);
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1)
plot(tmp(:,:,lb_ix, m_ix));
end
end
st.evnt_lab
error('Why analyze just baseline? ');
cov.trial{m_ix}
subplot(length(loi_labels)+1,1,1);
loi_labels
plot(cov.trial{m_ix})
cov.plot = cov.trial{m_ix})
cov.plot = cov.trial{m_ix}
cov_plot = cov.trial{m_ix}
a = resize(cov_plot)
cov_plot(1:32000) = []
a = replot(cov_plot)size(cov_plot)
plot(cov_plot)
size(cov_plot)
127019/52
help resample
x = [1,2,3,4,5]
resample(x, 1,2
resample(x, 1,2)
resample(x, 2, 1)
resample(x, 1,2)
size(corr.r2)
size(corr.r2,3)
cov_plot = resample (cov_plot, size(corr.r2,3))
size(cov_plot)
size(cov_plot,2)
cov_plot = resample (cov_plot, size(corr.r2,3), size(cov_plot,2))
size(cov_plot)
plot(cov_plot)
figure;
size(cov.trial{m_ix})
plot(cov.trial{m_ix})
plot(tmp(:,:,lb_ix, m_ix));
cov_plot = cov.trial{m_ix}
cov_plot(1:32000) = [];
size(cov_plot,2)
cov_plot = cov.trial{m_ix};
help resize
help downsample
x
x = [1,2,3,4,5,6,7,8,9,10]
x(5) = nan
x2 = downsample (x,2)
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
plot(cov_plot)
m_ix = 1
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
end
loi_labels{lb_ix}
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel(''), title(loi_labels{lb_ix})
end
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
end
axis([-inf inf -inf inf])
axis([-inf inf -1 1])
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf 1 9])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf inf -1 1])
end
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -9 9])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf inf -1 1])
end
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf inf -1 1])
end
tmp
size(tmp
size(tmp)
size(tmp,4)
size(tmp,1)
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
size(tmp,1)
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
lb_ix
lb_ix=1
tmp(:,:,lb_ix, m_ix)
size(tmp(:,:,lb_ix, m_ix))
aaa = tmp(:,:,lb_ix, m_ix)
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
m_ix
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
clear
clc
SBJ = 'IR51';
stat_id = 'crRat_MR_wl15k_ws2k_lg5k'
stat_id = 'crEKG_MR_wl15k_ws2k_lg5k_vars'
an_id = 'HGm_zscB2t3_sm4_wn250'
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_id = 'crRat_MR_wl15k_ws2k_lg5k'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
fprintf('===================================================\n');
fprintf('--------------------- Movie------------------------\n');
fprintf('===================================================\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
% Load region labels from excel spreadsheet, attach label data to elec
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
corr.gROI = elec.gROI;
clear tmp
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
m_ix=8
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
stat_id
clea
clear
clc
SBJ = 'IR51';
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_id = 'crEKG_MR_wl15k_ws2k_lg5k';
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
fprintf('===================================================\n');
fprintf('--------------------- Movie------------------------\n');
fprintf('===================================================\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
% Load elec data from \05_recon
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
% Load region labels from excel spreadsheet, attach label data to elec
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
% Group electrodes by (a) movie and (2) brain regions (lobes)
corr.gROI = elec.gROI;
clear tmp
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
m_ix=8
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
m_ix = 1
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
lb_ix
m_ix
m_ix = 3
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
end
%-- 8/15/2019 11:04 AM --%
SBJ = 'IR51';
crRat_MR_wl15k_ws2k_lg5k
stat_id = 'crRat_MR_wl15k_ws2k_lg5k_'
an_id = 'HGm_zscB2t3_sm4_wn250'
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
stat_id ='crRat_MR_wl15k_ws2k_lg5k'
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
fprintf('===================================================\n');
fprintf('--------------------- Movie------------------------\n');
fprintf('===================================================\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
%% Print results
% Compile positive and negative stats
sig_mat = zeros([numel(corr.label) numel(trial_info.video_id)]);
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
% Consolidate to binary sig/non-sig
if any(squeeze(corr.mask(m_ix,ch_ix,:)))
sig_mat(ch_ix,m_ix) = sum(squeeze(corr.mask(m_ix,ch_ix,:)));
%             % Flag whether positive or negative
%             sig_idx = squeeze(corr.qval(m_ix,ch_ix,:))<=st.alpha;
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))>0)
%                 sig_mat(m_ix,ch_ix,2) = 1;
%             end
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))<0)
%                 sig_mat(m_ix,ch_ix,3) = 1;
%             end
end
end
end
% Prep report
sig_report_fname = [hfa_fname(1:end-4) '_' stat_id '_sig_report.txt'];
if exist(sig_report_fname)
system(['mv ' sig_report_fname ' ' sig_report_fname(1:end-4) '_bck.txt']);
end
sig_report = fopen(sig_report_fname,'a');
result_str = ['%-10s' repmat('%-10i',[1 numel(trial_info.video_id)]) '\n'];
% Print header
fprintf(sig_report,'%s (n = %i)\n',SBJ,numel(corr.label));
fprintf(sig_report,['%-10s' repmat('%-10d',[1 numel(trial_info.video_id)]) '\n'],'label',trial_info.video_id);
% Print summary lines (absolute)
fprintf(sig_report,result_str, 'count', sum(sig_mat>0,1));
fprintf(sig_report,strrep(result_str,'i','.3f'), 'percent',...
sum(sig_mat>0,1)./numel(corr.label));
% Print Channel Lines
for ch_ix = 1:numel(corr.label)
% Report on significant electrodes for this SBJ
fprintf(sig_report,result_str,corr.label{ch_ix},sig_mat(ch_ix,:));
end
fclose(sig_report);
%% Save Results
out_fname = strcat(hfa_fname(1:end-4),'_',stat_id,'.mat');
fprintf('===================================================\n');
fprintf('--- Saving %s ------------------\n',out_fname);
fprintf('===================================================\n');
save(out_fname,'-v7.3','corr','bsln','bsln_cov','cov_stat','st','sig_mat');
load(elc_fname);
fn_elec_import_orig(SBJ,'main_ft','pat','',1);
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
corr.gROI = elec.gROI;
clear tmp
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
subplot(length(loi_labels)+1,1,1);
https://www.higheredjobs.com/details.cfm?JobCode=177062299 =
m_ix = 1
subplot(length(loi_labels)+1,1,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
subplot(length(loi_labels)+1,2,1);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
subplot(length(loi_labels)+1,2,2);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,1,lb_ix+1);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
end
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot)
xlabel(''), ylabel(''), title(st.model_lab)
axis([-inf inf -inf inf])
set(gca,'FontSize',3,'XMinorGrid','on')
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix})
axis([-inf size(tmp,1) -1 1])
set(gca,'FontSize',3,'XMinorGrid','on')
end
closeall
close all
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
print(Fig,'temp','-dpng', '-r900');
close all;
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
corr.win_lim_s
corr.win_lim
corr.win_lim_s
corr.time
size(corr.time)
squeeze(corr.time)
squeeze(corr.time)-32
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix),squeeze(corr.time)-32);
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
plot(tmp(:,:,lb_ix, m_ix),squeeze(corr.time)-32);
size(tmp,1)
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([min(squeeze(corr.time)-32) max(squeeze(corr.time)-32) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
squeeze(corr.time)-32
tmp(:,:,lb_ix, m_ix)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(tmp(:,:,lb_ix, m_ix),squeeze(corr.time)-32);
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
figure;
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf size(tmp,1) -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([-inf inf -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
cov_plot
cov.trial{m_ix}
cfg_trim
cfg_trim.latency
axis([cfg_trim.latency-32 -inf inf]);
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot = cov.trial{m_ix};
cov_plot(1:32000) = [];
cov_plot = downsample (cov_plot, round(size(cov_plot,2)/size(corr.r2,3)))
end
plot(cov_plot);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([cfg_trim.latency-32 -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
cfg_trim.latency-32
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([cfg_trim.latency -1 1]);
axis([cfg_trim.latency-32 -1 1]);
corr.time
a = corr.time-32
ibi_1000hz_cubic
cov
cov.time
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:32000) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:32000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:32000) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:32000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time-32, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)-32, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([cfg_trim.latency-32 -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
m_ix
time_idx
hfa_stat.time
times.bsln_len
times.movie_len
times.bsln_len
times.movie_len
times.bsln_len+times.movie_len(trial_info.video_id(m_ix)
times.bsln_len+times.movie_len(trial_info.video_id(m_ix))
times.bsln_len
corr.time
corr.time -32
cfg_trim.latency
time_idx
hfa_stat.time
times.movie_len
times.recov_len
figure;
% Plot Regressor
for column_ix = 1:2
subplot(length(loi_labels)+1,2,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,2,(lb_ix+1)*2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
corr.max_ix
size(corr.max_ix )
size(corr.max_ix)
% Group electrodes by (a) movie and (2) brain regions (lobes)
corr.gROI = elec.gROI;
clear tmp
clear tmp2
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp2(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.max_ix(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
tmp2
size(tmp)
size(tmp2)
tmp2(find(isnan(tmp))== Nan;
tmp2(find(isnan(tmp))= Nan;
tmp2(find(isnan(tmp))
tmp2(find(isnan(tmp)))= Nan;
tmp2(find(isnan(tmp)))= NaN;
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot HFA
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
cfg_trim
hfa_stat.powspctrm
size(hfa_stat.powspctrm)
squeeze(hfa_stat.powspctrm)
size(squeeze(hfa_stat.powspctrm))
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp3(:,tmp_ix,lb_ix,m_ix) = squeeze(hfa_stat.powspctrm(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
size(tmp3)
size(tmp2)
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot( tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
%             axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot( tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
%             axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot( tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
%             axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot( tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
%             axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figure
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
hfa_stat
hfa_stat.time
hfa_stat.time-(times.bsln_len)*1000
hfa_stat.time-times.bsln_len
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 (times.movie_len(m_ix)+ times.recov_len)*1000 inf -inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figure
Fig=1;
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 (times.movie_len(m_ix)+ times.recov_len)*1000 inf -inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 (times.movie_len(m_ix)+ times.recov_len)*1000 -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
hfa_stat.time-times.bsln_len
size(hfa_stat.time)
times.bsln_len
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
axis([0 (times.movie_len(m_ix)+ times.recov_len)*1000 -inf inf]);
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figure
Fig=1;
print(Fig,'temp','-dpng', '-r900');
close all;
size(hfa.powspctrm)
dhfa_stat
hfa_stat
cfgp = [];cfgp.viewmode = 'vertical';
ft_databrowser(cfgp,hfa_stat)
times.bsln_len
SBJ
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'.jpg']
print(Fig,'temp','-dpng', '-r900');
close all;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
times.event{...
[47.268,72.234,93.368]...
[]...
[]...}
times.event{...
[47.268,72.234,93.368],...
[],...
[]...}
times.event{...
[47.268,72.234,93.368],...
[],...
[]}
times.event{...
[47.268,72.234,93.368],...
[],...
[78.234]}
times.event
times.event= {...
[47.268,72.234,93.368],...
[],...
[78.234]}
times.event= {...
[47.268,72.234,93.368],...
[],...
[78.234],...
[38.734, 45.901, 53.101, 60.234, 66.901, 74.034, 81.668, 89.068, 96.734, 103.734, 110.601, 117.334],...
[82.234],...
[],...
[42.001, 52.001, 62.068, 72.068, 82.068, 92.068, 102.068, 112.068],...
[119.134]}
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on
line_event = plot([10,10],[-5,15]);
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on
line_event = plot([10,10],[-5,15]);
line_event.color = 'black';
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on
line_event = plot([10,10],[-5,15]);
line_event.Color = 'black';
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
times.event
size(times.event)
size(times.event{1})
size(times.event{2})
size(times.event{3})
m_ix
size(times.event{m_ix})
size(times.event{3})
m_ix = 7
m_ix
size(times.event{m_ix})
times.event{m_ix}
times.event.1{m_ix}
times.event.2{m_ix}
times.event.2{m_ix}(1)
times.event.2{m_ix}(2)
times.event{m_ix}(2)
size(times.event{m_ix},2)
event_ix = 1
line_event = plot([times.event{m_ix}(event_ix),10],[-5,15]);hold on  ;
[times.event{m_ix}(event_ix)
times.event{m_ix}(2)
times.event{m_ix}(event_ix)
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len...,
times.event{m_ix}(event_ix)]- times.bsln_len,...
[-5,15]);hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
size(times.event{m_ix},2)
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)]- times.bsln_len],...
[-5,15]);hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
size(times.event{m_ix},2)
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)]- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)]- times.bsln_len],...
[-5,15]); hold on  ;
for event_ix = 1: 1
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)]- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off
times.event{m_ix}(event_ix)- times.bsln_len
[times.event{m_ix}(event_ix)
times.event{m_ix}(event_ix)
times.event{m_ix}(event_ix)- times.bsln_len
times.event{m_ix}(event_ix)
times.bsln_len
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
corr.win_lim_s
size(corr.win_lim_s)
corr.win_lim_s
size(corr.win_lim_s,1)
corr.win_ix
m_ix
size(times.event{m_ix},2)
times.event{m_ix}(event_ix)
corr.win
corr.win_lim
size(corr.win_lim_s,1)
corr.win_ix = 1
corr.win_lim_s
corr.win_lim_s(corr.win_ix,1)
corr.win_lim_s(corr.win_ix,2)
times.event{m_ix}(event_ix)
for m_ix = 1:numel(trial_info.video_id)
for corr.win_ix = 1 : size(corr.win_lim_s,1)
for event_ix = 1: size(times.event{m_ix},2)
if corr.win_lim_s(corr.win_ix,1) < times.event{m_ix}(event_ix) & ...
corr.win_lim_s(corr.win_ix,2) > times.event{m_ix}(event_ix);
corr.win_flagEvnt(corr.win_ix, m_ix)= 1;
else
corr.win_flagEvnt(corr.win_ix, m_ix)= 0;
end
end
end
end
for m_ix = 1:numel(trial_info.video_id)
for win_ix = 1 : size(corr.win_lim_s,1)
for event_ix = 1: size(times.event{m_ix},2)
if corr.win_lim_s(win_ix,1) < times.event{m_ix}(event_ix) & ...
corr.win_lim_s(win_ix,2) > times.event{m_ix}(event_ix);
corr.win_flagEvnt(win_ix, m_ix)= 1;
else
corr.win_flagEvnt(win_ix, m_ix)= 0;
end
end
end
end
corr.win_flagEvnt
%-- 8/16/2019 10:13 AM --%
SBJ = 'IR51';
an_id = 'HGm_zscB30_sm0_wn250';
an_id = 'HGm_zscB2_sm4_wn250';
an_id = 'HGm_zscB2t3_sm4_wn250';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_id = 'crRat_MR_wl15k_ws2k_lg5k';
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
fprintf('===================================================\n');
fprintf('--------------------- Movie------------------------\n');
fprintf('===================================================\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
%% Print results
% Compile positive and negative stats
sig_mat = zeros([numel(corr.label) numel(trial_info.video_id)]);
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
% Consolidate to binary sig/non-sig
if any(squeeze(corr.mask(m_ix,ch_ix,:)))
sig_mat(ch_ix,m_ix) = sum(squeeze(corr.mask(m_ix,ch_ix,:)));
%             % Flag whether positive or negative
%             sig_idx = squeeze(corr.qval(m_ix,ch_ix,:))<=st.alpha;
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))>0)
%                 sig_mat(m_ix,ch_ix,2) = 1;
%             end
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))<0)
%                 sig_mat(m_ix,ch_ix,3) = 1;
%             end
end
end
end
% Prep report
sig_report_fname = [hfa_fname(1:end-4) '_' stat_id '_sig_report.txt'];
if exist(sig_report_fname)
system(['mv ' sig_report_fname ' ' sig_report_fname(1:end-4) '_bck.txt']);
end
sig_report = fopen(sig_report_fname,'a');
result_str = ['%-10s' repmat('%-10i',[1 numel(trial_info.video_id)]) '\n'];
% Print header
fprintf(sig_report,'%s (n = %i)\n',SBJ,numel(corr.label));
fprintf(sig_report,['%-10s' repmat('%-10d',[1 numel(trial_info.video_id)]) '\n'],'label',trial_info.video_id);
% Print summary lines (absolute)
fprintf(sig_report,result_str, 'count', sum(sig_mat>0,1));
fprintf(sig_report,strrep(result_str,'i','.3f'), 'percent',...
sum(sig_mat>0,1)./numel(corr.label));
% Print Channel Lines
for ch_ix = 1:numel(corr.label)
% Report on significant electrodes for this SBJ
fprintf(sig_report,result_str,corr.label{ch_ix},sig_mat(ch_ix,:));
end
fclose(sig_report);
%% Save Results
out_fname = strcat(hfa_fname(1:end-4),'_',stat_id,'.mat');
fprintf('===================================================\n');
fprintf('--- Saving %s ------------------\n',out_fname);
fprintf('===================================================\n');
save(out_fname,'-v7.3','corr','bsln','bsln_cov','cov_stat','st','sig_mat');


%% Print results II (Kuan)
% Load elec data from \05_recon
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
% Load region labels from excel spreadsheet, attach label data to elec
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
% Group xCorr and lag data [electrodes] by (a) movie and (2) brain regions (lobes)
corr.gROI = elec.gROI;
clear tmp
clear tmp2
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp2(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.max_ix(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
tmp2(find(isnan(tmp)))= NaN;
% Group HFA data [electrodes] by (a) movie and (2) brain regions (lobes)
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp3(:,tmp_ix,lb_ix,m_ix) = squeeze(hfa_stat.powspctrm(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
% Making plots (top = regrssor; followed by butterfly for each region/lobe)
for m_ix = 1:numel(trial_info.video_id)
for win_ix = 1 : size(corr.win_lim_s,1)
for event_ix = 1: size(times.event{m_ix},2)
if corr.win_lim_s(win_ix,1) < times.event{m_ix}(event_ix) & ...
corr.win_lim_s(win_ix,2) > times.event{m_ix}(event_ix);
corr.win_flagEvnt(win_ix, m_ix)= 1;
else
corr.win_flagEvnt(win_ix, m_ix)= 0;
end
end
end
end
times.movie_names = {...
['Disgust: Roaches'],...
['Happy: Modern Times'],...
['Fear: Witness'],...
['Neutral: Sticks'],...
['Fear: Cujo'],...
['Disgust: Poop Lady'],...
['Neutral: ColorBars'],...
['Happy: Lucy']};
times.movie_names
m_ix = 1
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
% Load elec data from \05_recon
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
% Load region labels from excel spreadsheet, attach label data to elec
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
% Group xCorr and lag data [electrodes] by (a) movie and (2) brain regions (lobes)
corr.gROI = elec.gROI;
clear tmp
clear tmp2
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp2(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.max_ix(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
tmp2(find(isnan(tmp)))= NaN;
% Group HFA data [electrodes] by (a) movie and (2) brain regions (lobes)
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp3(:,tmp_ix,lb_ix,m_ix) = squeeze(hfa_stat.powspctrm(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
% Making plots (top = regrssor; followed by butterfly for each region/lobe)
for m_ix = 1:numel(trial_info.video_id)
for win_ix = 1 : size(corr.win_lim_s,1)
for event_ix = 1: size(times.event{m_ix},2)
if corr.win_lim_s(win_ix,1) < times.event{m_ix}(event_ix) & ...
corr.win_lim_s(win_ix,2) > times.event{m_ix}(event_ix);
corr.win_flagEvnt(win_ix, m_ix)= 1;
else
corr.win_flagEvnt(win_ix, m_ix)= 0;
end
end
end
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
times.movie_names = {...
['Disgust_Roaches'],...
['Happy_Modern Times'],...
['Fear_Witness'],...
['Neutral_Sticks'],...
['Fear_Cujo'],...
['Disgust_Poop Lady'],...
['Neutral_ColorBars'],...
['Happy_Lucy']};
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
print(Fig,Fig_fname,'-dpng', '-r900');
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix},'.jpg']
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
corr.time
win_ix
times.event{m_ix}(event_ix)
- size(corr.time
- size(corr.time))
corr.time
corr.time - Times.event{m_ix}(event_ix)
corr.time - times.event{m_ix}(event_ix)
abs(corr.time - times.event{m_ix}(event_ix))
min(abs(corr.time - times.event{m_ix}(event_ix)))
find(abs(corr.time - times.event{m_ix}(event_ix)) == min(abs(corr.time - times.event{m_ix}(event_ix))))
abs(corr.time - times.event{m_ix}(event_ix))
corr.label
event_ix
m_ix
corr.win_flagEvnt{m_ix}(event_ix)=...
find(abs(corr.time - times.event{m_ix}(event_ix))...
== min(abs(corr.time - times.event{m_ix}(event_ix))));
corr.win_flagEvnt
corr.win_flagEvnt = []
corr.win_flagEvnt{m_ix}(event_ix)=...
find(abs(corr.time - times.event{m_ix}(event_ix))...
== min(abs(corr.time - times.event{m_ix}(event_ix))));
find(abs(corr.time - times.event{m_ix}(event_ix))...
== min(abs(corr.time - times.event{m_ix}(event_ix))));
corr.win_flagEvnt
for m_ix = 1:numel(trial_info.video_id)
for event_ix = 1: size(times.event{m_ix},2)
corr.win_flagEvnt{m_ix}(event_ix)=...
find(abs(corr.time - times.event{m_ix}(event_ix))...
== min(abs(corr.time - times.event{m_ix}(event_ix))));
end
end
corr
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hols on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:3
subplot(length(loi_labels)+1,3,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,3,(lb_ix*3)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = ['Fig_',SBJ,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
an_id
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
numel(trial_info.video_id)
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
corr.mask
corr.qmask
corr.pval
size(corr.qmask)
clear tmp1
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp1(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.qmask(m_ix,ch_ix, :));
tmp2(1:57,tmp_ix,lb_ix,m_ix) = squeeze(corr.max_ix(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
tmp1(find(isnan(tmp)))= NaN;
tmp2(find(isnan(tmp)))= NaN;
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
times.movie_len
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len{m_ix},times.movie_len{m_ix}],[-1,1],'Color',[17 17 17])
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len{m_ix},times.movie_len{m_ix}],[-5,15],'Color',[17 17 17])
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len{m_ix},times.movie_len{m_ix}],[0,1],'Color',[17 17 17])
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[0,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
figure
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
lb_ix = 1
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len{m_ix},times.movie_len{m_ix}],[-1,1],'Color',[17 17 17])
times.movie_len{m_ix}
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color',[17 17 17])
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-5,15],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[0,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[0,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
lb_ix = 1
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
tmp
size(tmp)
tmp(:,:,lb_ix, m_ix)
size(tmp(:,:,lb_ix, m_ix))
nansum(tmp(:,:,lb_ix, m_ix))
sum(tmp(:,:,lb_ix, m_ix))
nansum(tmp(:,:,lb_ix, m_ix))
nanmean(tmp(:,:,lb_ix, m_ix))
mean(tmp(:,:,lb_ix, m_ix))
round(mean(tmp(:,:,lb_ix, m_ix)),2)
round(mean(tmp(:,:,lb_ix, m_ix)),3)
round(mean(tmp(:,:,lb_ix, m_ix)),2)
num2str(round(mean(tmp(:,:,lb_ix, m_ix))))
num2str(round(mean(tmp(:,:,lb_ix, m_ix))),2)
num2str(round(mean(tmp(:,:,lb_ix, m_ix)),2))
plot_title = [loi_labels{lb_ix}, num2str(round(mean(tmp(:,:,lb_ix, m_ix)),2))]
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
num2str(round(mean(tmp(:,:,lb_ix, m_ix)),2))
plot_title = [loi_labels{lb_ix},'_', num2str(round(mean(tmp(:,:,lb_ix, m_ix)),2))]
xlabel(''), ylabel('xCorr'), title(plot_title);
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-5,15],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[0,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[0,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-5,15],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[0,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[0,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
%-- 8/16/2019 12:52 PM --%
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws2k_lg1k',...
{'crRat_MR_wl5k_ws2k_lg5k',...
{'crRat_MR_wl15k_ws2k_lg5k',...
{'crEKG_MR_wl5k_ws2k_lg1k',...
{'crEKG_MR_wl5k_ws2k_lg5k',...
{'crEKG_MR_wl15k_ws2k_lg5k'};
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws2k_lg1k',...
'crRat_MR_wl5k_ws2k_lg5k',...
'crRat_MR_wl15k_ws2k_lg5k',...
'crEKG_MR_wl5k_ws2k_lg1k',...
'crEKG_MR_wl5k_ws2k_lg5k',...
'crEKG_MR_wl15k_ws2k_lg5k'};
stat_ids
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_id = 'crRat_MR_wl5k_ws2k_lg1k'
%%
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
%% Remove bad_epochs from HFA
% Convert bad_epochs to trial times using cov.sampleinfo
% !!! Kuan: figure out how to get the sample number from analysis_time
% (bad_epochs_preproc) into the time/sample from the start of each movie
% Remove bad epochs
% !!! Kuan: now you need to make the data during the epochs (adjusted to
% trials) into NaN
%% Build null distribution
fprintf('===================================================\n');
fprintf('--------------------- Baselines -------------------\n');
fprintf('===================================================\n');
% Extract baseline data
cfg_trim = [];
cfg_trim.trials = 'all';
cfg_trim.latency = [0.0 times.bsln_len];
bsln_hfa = ft_selectdata(cfg_trim,hfa);
bsln_cov = ft_selectdata(cfg_trim,cov);
% bsln_cat = ft_appenddata([], bsln_hfa);
% bsln_cat = horzcat(bsln_cat.trial{:});
% if any(isnan(bsln_cat(:))); error('why are there nans in baseline?'); end
win_lim    = fn_sliding_window_lim(squeeze(bsln_hfa.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
% Build distribution of window averages
% Create structure for baseline corr in fieldtrip style
bsln.label     = bsln_hfa.label;
bsln.dimord    = 'rpt_chan_time';
bsln.time      = bsln_hfa.time(round(mean(win_lim,2)));
bsln.r2        = nan([size(bsln_hfa.powspctrm,1) size(bsln_hfa.powspctrm,2) size(win_lim,1)]);
bsln.win_lim   = win_lim;
bsln.win_lim_s = bsln_hfa.time(win_lim);
bsln.good_win  = false([numel(trial_info.video_id) size(bsln.time,1)]);
bsln.thresh    = nan(size(bsln.label));
fprintf('Building baseline distribution...\n\t');
for ch_ix = 1:numel(bsln_hfa.label)
fprintf('%d..',ch_ix);
if mod(ch_ix,30)==0; fprintf('\n\t'); end
bsln_vals = [];
for m_ix = 1:numel(trial_info.video_id)
% Average HFA per window
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(bsln_cov.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(bsln_hfa.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% If cov and hfa don't have NaNs, compute correlation
if ~any(isnan(cov_data)) && ~any(isnan(hfa_data))
% !!! Kuan: can switch this to xcov, add lags
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 bsln.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 bsln.good_win(m_ix,w_ix) = 1;
%                 bsln_vals = [bsln_vals tmp(1,2)];
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
bsln.r2(m_ix,ch_ix,w_ix) = max(tmp);
bsln.good_win(m_ix,w_ix) = 1;
bsln_vals = [bsln_vals max(tmp)];
bsln.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
end
end
% Compute threshold
bsln_sort = sort(abs(bsln_vals),'descend');
bsln.thresh(ch_ix) = bsln_sort(round(numel(bsln_sort)*st.alpha));
end
fprintf('\n');
fprintf('===================================================\n');
fprintf('--------------------- Movie------------------------\n');
fprintf('===================================================\n');
%% Select data in stat window
if strcmp(st.evnt_lab,'B')
%     hfa_stat = bsln;
error('Why analyze just baseline? cant test bsln vs. bsln...');
elseif strcmp(st.evnt_lab,'M') || strcmp(st.evnt_lab,'BM')
cfg_trim.latency = [times.bsln_len times.bsln_len+max(times.movie_len)];
if strcmp(st.evnt_lab,'BM')
cfg_trim.latency(1) = 0;
end
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
% NaN out non-movie data for shorter movies
for m_ix = 1:numel(times.movie_len)
if trial_info.video_id(m_ix)~=8
time_idx = hfa_stat.time > times.bsln_len+times.movie_len(trial_info.video_id(m_ix));
hfa_stat.powspctrm(m_ix,:,1,time_idx) = nan([size(hfa_stat.powspctrm,2) sum(time_idx)]);
cov_stat.trial{m_ix}(1,time_idx) = nan([1 sum(time_idx)]);
end
end
elseif strcmp(st.evnt_lab,'R')
error('need to write code for realigning data to have no nans');
elseif strcmp(st.evnt_lab,'MR')
cfg_trim.latency = [times.bsln_len hfa.time(end)];
hfa_stat = ft_selectdata(cfg_trim,hfa);
cov_stat = ft_selectdata(cfg_trim,cov);
elseif strcmp(st.evnt_lab,'BMR')
hfa_stat = hfa;
cov_stat = cov;
elseif strcmp(st.evnt_lab,'BR')
error('why include non-consecutive events baseline and recovery?');
else
error(['Unknown st.evnt_lab ' st.evnt_lab]);
end
%% Compute Window Parameters
win_lim    = fn_sliding_window_lim(squeeze(hfa_stat.powspctrm(1,1,1,:)),...
round(st.win_len*trial_info.sample_rate),...
round(st.win_step*trial_info.sample_rate));
win_center = round(mean(win_lim,2));
%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create structure for corr in fieldtrip style
corr.label     = hfa_stat.label;
corr.dimord    = 'rpt_chan_time';
corr.time      = hfa_stat.time(win_center);
corr.r2        = nan([size(hfa_stat.powspctrm,1) size(hfa_stat.powspctrm,2) size(win_lim,1)]);
corr.win_lim   = win_lim;
corr.win_lim_s = hfa_stat.time(win_lim);
corr.good_win  = false([numel(trial_info.video_id) size(corr.time,1)]);
corr.pval      = nan(size(corr.r2));
corr.qmask     = nan(size(corr.r2));
corr.mask      = nan(size(corr.r2));
% corr.mask2     = nan(size(corr.r2));
% Compute t-test per movie, channel, and window
for m_ix = 1:numel(trial_info.video_id)
fprintf('Movie %d/%d Stats...\n\t',m_ix,numel(trial_info.video_id));
for ch_ix = 1:numel(hfa_stat.label)
if mod(ch_ix,30)==0; fprintf('\n\t'); end
fprintf('%d..',ch_ix);
for w_ix = 1:size(win_lim,1)
cov_data = squeeze(cov_stat.trial{m_ix}(1,win_lim(w_ix,1):win_lim(w_ix,2)))';
hfa_data = squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2)));
% Skip windows with bad/no data
if ~any(isnan(hfa_data)) && ~any(isnan(cov_data))
%                 % using corrcoef function
%                 tmp = corrcoef(hfa_data,cov_data);
%                 corr.r2(m_ix,ch_ix,w_ix) = tmp(1,2);
%                 corr.good_win(m_ix,w_ix) = 1;
% curing crosscorr function
tmp = crosscorr(hfa_data,cov_data, st.win_lag*trial_info.sample_rate);
tmp (1:(length(tmp)-1)/2)=[];
corr.r2(m_ix,ch_ix,w_ix) = max(tmp);
corr.good_win(m_ix,w_ix) = 1;
corr.max_ix (m_ix,ch_ix,w_ix)= find(tmp == max(tmp));
end
% Compute one-sided test
bsln_vals = sort(reshape(bsln.r2(:,ch_ix,:),[size(bsln.r2,1)*size(bsln.r2,3) 1]),'descend');
bsln_vals(isnan(bsln_vals)) = [];
corr.pval(m_ix,ch_ix,w_ix) = 1-(sum(corr.r2(m_ix,ch_ix,w_ix)>bsln_vals)/numel(bsln_vals));
%             corr.mask2(m_ix,ch_ix,w_ix) = corr.r2(m_ix,ch_ix,w_ix) >= bsln.thresh(ch_ix);
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha
corr.mask(m_ix,ch_ix,w_ix) = 1;
else
corr.mask(m_ix,ch_ix,w_ix) = 0;
end
% Correct for multiple comparisons
if corr.pval(m_ix,ch_ix,w_ix)<=st.alpha/size(win_lim,1)
corr.qmask(m_ix,ch_ix,w_ix) = 1;
else
corr.qmask(m_ix,ch_ix,w_ix) = 0;
end
% Old statistical method: Test against null hypothesis corr = 0
%   This version is testing HFA values, not r2 (left over from SBJ05ab_HFA_actv)
%             [~, corr.pval(m_ix,ch_ix,w_ix)] = ttest(squeeze(hfa_stat.powspctrm(m_ix,ch_ix,1,win_lim(w_ix,1):win_lim(w_ix,2))));
end
% Old Method: False Discovery Rate adjustment for multiple comparisons
%         good_idx = ~isnan(corr.pval(m_ix,ch_ix,:));
%         [~, ~, ~, corr.qval(m_ix,ch_ix,good_idx)] = fdr_bh(corr.pval(m_ix,ch_ix,good_idx));
%         corr.mask(m_ix,ch_ix,good_idx) = corr.qval(m_ix,ch_ix,good_idx)<=st.alpha;
end
fprintf('\n');
end
%% Print results
% Compile positive and negative stats
sig_mat = zeros([numel(corr.label) numel(trial_info.video_id)]);
for m_ix = 1:numel(trial_info.video_id)
for ch_ix = 1:numel(corr.label)
% Consolidate to binary sig/non-sig
if any(squeeze(corr.mask(m_ix,ch_ix,:)))
sig_mat(ch_ix,m_ix) = sum(squeeze(corr.mask(m_ix,ch_ix,:)));
%             % Flag whether positive or negative
%             sig_idx = squeeze(corr.qval(m_ix,ch_ix,:))<=st.alpha;
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))>0)
%                 sig_mat(m_ix,ch_ix,2) = 1;
%             end
%             if any(squeeze(corr.r2(m_ix,ch_ix,sig_idx))<0)
%                 sig_mat(m_ix,ch_ix,3) = 1;
%             end
end
end
end
% Prep report
sig_report_fname = [hfa_fname(1:end-4) '_' stat_id '_sig_report.txt'];
if exist(sig_report_fname)
system(['mv ' sig_report_fname ' ' sig_report_fname(1:end-4) '_bck.txt']);
end
sig_report = fopen(sig_report_fname,'a');
result_str = ['%-10s' repmat('%-10i',[1 numel(trial_info.video_id)]) '\n'];
% Print header
fprintf(sig_report,'%s (n = %i)\n',SBJ,numel(corr.label));
fprintf(sig_report,['%-10s' repmat('%-10d',[1 numel(trial_info.video_id)]) '\n'],'label',trial_info.video_id);
% Print summary lines (absolute)
fprintf(sig_report,result_str, 'count', sum(sig_mat>0,1));
fprintf(sig_report,strrep(result_str,'i','.3f'), 'percent',...
sum(sig_mat>0,1)./numel(corr.label));
% Print Channel Lines
for ch_ix = 1:numel(corr.label)
% Report on significant electrodes for this SBJ
fprintf(sig_report,result_str,corr.label{ch_ix},sig_mat(ch_ix,:));
end
fclose(sig_report);
%% Save Results
out_fname = strcat(hfa_fname(1:end-4),'_',stat_id,'.mat');
fprintf('===================================================\n');
fprintf('--- Saving %s ------------------\n',out_fname);
fprintf('===================================================\n');
save(out_fname,'-v7.3','corr','bsln','bsln_cov','cov_stat','st','sig_mat');
cfg_trim
corr.win_lim
corr.timecorr.time
corr.time
size(corr.time)
size(corr.time,2)
% Load elec data from \05_recon
elc_fname = [SBJ_vars.dirs.recon,SBJ,'_elec_main_ft_pat'];
load(elc_fname);
% Load region labels from excel spreadsheet, attach label data to elec
[num,region_label] = xlsread([SBJ_vars.dirs.recon,SBJ,'_referenced_region.xlsx']); clear num;
elec.gROI = region_label(2:length(elec.label)+1,13);
loi_labels = region_label (2:length(elec.label)+1,15);
loi_labels(find(strcmp(loi_labels,'')==1))=[];
% Check that corr and elec are in same order
if ~all(strcmp(elec.label,corr.label))
error('need to reorder elec and corr to have same order');
end
% Group xCorr and lag data [electrodes] by (a) movie and (2) brain regions (lobes)
corr.gROI = elec.gROI;
clear tmp
clear tmp1
clear tmp2
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp(1:size(corr.time,2),tmp_ix,lb_ix,m_ix) = squeeze(corr.r2(m_ix,ch_ix, :));
tmp1(1:size(corr.time,2),tmp_ix,lb_ix,m_ix) = squeeze(corr.qmask(m_ix,ch_ix, :));
tmp2(1:size(corr.time,2),tmp_ix,lb_ix,m_ix) = squeeze(corr.max_ix(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
tmp(find(tmp==0))= NaN;
tmp1(find(isnan(tmp)))= NaN;
tmp2(find(isnan(tmp)))= NaN;
% Group HFA data [electrodes] by (a) movie and (2) brain regions (lobes)
for m_ix = 1:numel(trial_info.video_id)
for lb_ix = 1:numel(loi_labels)
tmp_ix = 1;
for ch_ix = 1: numel(corr.label)
if strcmp(corr.gROI(ch_ix),loi_labels(lb_ix))
tmp3(:,tmp_ix,lb_ix,m_ix) = squeeze(hfa_stat.powspctrm(m_ix,ch_ix, :));
tmp_ix = tmp_ix+1;
end
end
end
end
%
% for m_ix = 1:numel(trial_info.video_id)
%         for event_ix = 1: size(times.event{m_ix},2)
%             corr.win_flagEvnt{m_ix}(event_ix)=...
%                 find(abs(corr.time - times.event{m_ix}(event_ix))...
%                  == min(abs(corr.time - times.event{m_ix}(event_ix))));
%         end
% end
%
for m_ix = 1:numel(trial_info.video_id)
figure;
% Plot Regressor
for column_ix = 1:4
subplot(length(loi_labels)+1,4,column_ix);
if      strcmp(st.evnt_lab,'B');
error('Why analyze just baseline? ');
elseif  strcmp(st.evnt_lab,'R');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'M');
error('Under construction...');
elseif  strcmp(st.evnt_lab,'MR');
cov_plot_data = cov.trial{m_ix};
cov_plot_data(1:times.bsln_len* 1000 ) = [];
cov_plot_data = downsample (cov_plot_data, round(size(cov_plot_data,2)/size(corr.r2,3)))
cov_plot_time = cov.time{m_ix};
cov_plot_time(1:times.bsln_len* 1000) = [];
cov_plot_time = downsample (cov_plot_time, round(size(cov_plot_time,2)/size(corr.r2,3)))
end
plot(cov_plot_time - times.bsln_len, cov_plot_data);
xlabel(''), ylabel(''), title(st.model_lab);
axis([-inf inf -inf inf]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot xcorr
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+2);
plot(squeeze(corr.time)- times.bsln_len, tmp(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-1,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-1,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('xCorr'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -1 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% plot lags
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+4);
plot(squeeze(corr.time)- times.bsln_len, tmp2(:,:,lb_ix, m_ix));
xlabel(''), ylabel('lag(ms)'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 5000]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot hfa
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+1);
plot(hfa_stat.time-times.bsln_len,tmp3(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[-5,15],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[-5,15]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('hfa'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len -5 10]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Plot Sig
for lb_ix = 1:numel(loi_labels)
subplot(length(loi_labels)+1,4,(lb_ix*4)+3);
plot(squeeze(corr.time)- times.bsln_len, tmp1(:,:,lb_ix, m_ix));hold on;
plot([times.movie_len(m_ix),times.movie_len(m_ix)],[0,1],'Color','green')
for event_ix = 1: size(times.event{m_ix},2)
line_event = plot([times.event{m_ix}(event_ix)- times.bsln_len,...
times.event{m_ix}(event_ix)- times.bsln_len],...
[0,1]); hold on  ;
line_event.Color = 'black';
end
hold off;
xlabel(''), ylabel('Sig'), title(loi_labels{lb_ix});
axis([0 times.movie_len(m_ix)+ times.recov_len 0 1]);
set(gca,'FontSize',3,'XMinorGrid','on') ;
end
% Make Figures
Fig=1;
Fig_fname = [SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
print(Fig,Fig_fname,'-dpng', '-r900');
close all;
end
plot_title =...
['Seg=',st.evnt_lab,...
'wl=',st.win_len,...
'ws=',st.win_step,...
'lag=',st.win_lag]
% Parameters for HFA actvation vs. baseline
st.model_lab = 'crRat';
st.trial_cond  = {'all'};
st.evnt_lab = 'MR';
st.stat_lim = 'all';
%st.n_boots  = 1000;
st.win_len  = 15.0;
st.win_step = 2.0;
st.alpha    = 0.05;
st.win_lag = 5.0;
plot_title =...
['seg=',st.evnt_lab,...
' wl=',st.win_len,...
' ws=',st.win_step,...
' lag=',st.win_lag]
st.win_len
times.bsln_len =...
['seg=',num2str(st.evnt_lab),...
' wl=',num2str(st.win_len),...
' ws=',num2str(st.win_step),...
' lag=',num2str(st.win_lag)]
Fig_fname
'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}
st.model_lab
plot_title = ['_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
SBJ_vars.dirs.proc
Fig_fname = [SBJ_vars.dirs.proc,SBJ,'_',an_id,'_',stat_id,'_Mov', num2str(m_ix),'_',times.movie_names{m_ix}]
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws1k_lg1k',...
'crRat_MR_wl5k_ws1k_lg5k',...
'crRat_MR_wl15k_ws2k_lg5k',...
'crEKG_MR_wl5k_ws1k_lg1k',...
'crEKG_MR_wl5k_ws1k_lg5k',...
'crEKG_MR_wl15k_ws2k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
st_ix
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws1k_lg1k',...
'crRat_MR_wl5k_ws1k_lg3k',...
'crRat_MR_wl15k_ws2k_lg5k',...
'crEKG_MR_wl5k_ws1k_lg1k',...
'crEKG_MR_wl5k_ws1k_lg3k',...
'crEKG_MR_wl15k_ws2k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws1k_lg1k',...
'crRat_MR_wl5k_ws1k_lg3k',...
'crRat_MR_wl15k_ws2k_lg5k',...
'crEKG_MR_wl5k_ws1k_lg1k',...
'crEKG_MR_wl5k_ws1k_lg3k',...
'crEKG_MR_wl15k_ws2k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
% an_id = 'HGm_zscB2t3_sm4_wn250';
% stat_id = 'crRat_MR_wl15k_ws2k_lg5k';
%-- 8/16/2019 1:53 PM --%
clear
clc
load('IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k.mat')
stat_ids = {'crRat_MR_w30k_ws3k_lg5k',...
'crEKG_MR_w30k_ws3k_lg5k'};
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl5k_ws1k_lg1k',...
'crRat_MR_wl5k_ws1k_lg3k',...
'crRat_MR_wl15k_ws2k_lg5k',...
'crEKG_MR_wl5k_ws1k_lg1k',...
'crEKG_MR_wl5k_ws1k_lg3k',...
'crEKG_MR_wl15k_ws2k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
% an_id = 'HGm_zscB2t3_sm4_wn250';
% stat_id = 'crRat_MR_wl15k_ws2k_lg5k';
stat_ids = {'crRat_MR_w30k_ws3k_lg5k',...
'crEKG_MR_w30k_ws3k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
numel(stat_ids)
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
stat_ids = {'crRat_MR_w30k_ws3k_lg5k',...
'crEKG_MR_w30k_ws3k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
stat_ids = {'crRat_MR_wl30k_ws3k_lg5k',...
'crEKG_MR_wl30k_ws3k_lg5k'};
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
clear
clc
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_cRat_MR_w5k_ws1k_lg1k
clear
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_w5k_ws1k_lg1k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k
load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k
size(corr.max_ix)
corr.max_ix(j,k,:)
k=1
j=1
i=1
corr.max_ix(j,k,:)
for i = 1:6
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k
for j = 1:8
for k = 1:80
report_xcorrix(k,8*(j-1)+i) = nanmean (corr.max_ix(j,k,:))
report_sumsig(k,8*(j-1)+i) = nansum (corr.qmask(j,k,:))
report_xcorrmean(k,8*(j-1)+i) = nanmean (corr.r2(j,k,:))
end
end
end
end
for i = 1:6
clear corr
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k
end
for j = 1:8
for k = 1:80
report_xcorrix(k,8*(j-1)+i) = nanmean (corr.max_ix(j,k,:))
report_sumsig(k,8*(j-1)+i) = nansum (corr.qmask(j,k,:))
report_xcorrmean(k,8*(j-1)+i) = nanmean (corr.r2(j,k,:))
end
end
end
for i = 1:6
clear corr
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k;
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k;
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k;
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k;
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k;
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k;
end
for j = 1:8
for k = 1:80
report_xcorrix(k,8*(j-1)+i) = nanmean (corr.max_ix(j,k,:));
report_sumsig(k,8*(j-1)+i) = nansum (corr.qmask(j,k,:));
report_xcorrmean(k,8*(j-1)+i) = nanmean (corr.r2(j,k,:));
end
end
end
for i = 1:6
clear corr
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k;
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k;
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k;
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k;
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k;
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k;
end
for j = 1:8
for k = 1:80
report_xcorrix(k,6*(j-1)+i) = nanmean (corr.max_ix(j,k,:));
report_sumsig(k,6*(j-1)+i) = nansum (corr.qmask(j,k,:));
report_xcorrmean(k,6*(j-1)+i) = nanmean (corr.r2(j,k,:));
end
end
end
xlsxwrite('Output.xlsx', report_xcorrmean, 'mean xcorr')
xlsxwrite('Output.xlsx', report_sumsig, 'sig win')
xlsxwrite('Output.xlsx', report_xcorrix, 'xcorr ix')
xlswrite('Output.xlsx', report_xcorrmean, 'mean xcorr')
xlswrite('Output.xlsx', report_sumsig, 'sig win')
xlswrite('Output.xlsx', report_xcorrix, 'xcorr ix')
for i = 1:6
clear corr
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k;
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k;
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k;
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k;
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k;
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k;
end
for j = 1:8
for k = 1:80
report_xcorrix(k,6*(j-1)+i) = nanmean (corr.max_ix(j,k,:));
report_sumsig(k,6*(j-1)+i) = nansum (corr.qmask(j,k,:));
report_xcorrmean(k,6*(j-1)+i) = nanmean (corr.r2(j,k,:));
end
end
end
xlswrite('Output2.xlsx', report_xcorrmean, 'mean xcorr')
xlswrite('Output2.xlsx', report_sumsig, 'sig win')
xlswrite('Output2.xlsx', report_xcorrix, 'xcorr ix')
j=1
j=2
6*(j-1)+i
i=1
6*(j-1)+i
clear report*
for i = 1:6
clear corr
if i == 1;      load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg1k;
elseif i == 2;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl5k_ws1k_lg3k;
elseif i == 3;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crRat_MR_wl15k_ws2k_lg5k;
elseif i == 4;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg1k;
elseif i == 5;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl5k_ws1k_lg3k;
elseif i == 6;  load     IR51_ROI_HGm_zscB2t3_sm4_wn250_crEKG_MR_wl15k_ws2k_lg5k;
end
for j = 1:8
for k = 1:80
report_xcorrix(k,6*(j-1)+i) = nanmean (corr.max_ix(j,k,:));
report_sumsig(k,6*(j-1)+i) = nansum (corr.qmask(j,k,:));
report_xcorrmean(k,6*(j-1)+i) = nanmean (corr.r2(j,k,:));
end
end
end
xlswrite('Output2.xlsx', report_xcorrmean, 'mean xcorr')
xlswrite('Output2.xlsx', report_sumsig, 'sig win')
xlswrite('Output2.xlsx', report_xcorrix, 'xcorr ix')
clear
clc
SBJ = 'IR51';
an_id = 'HGm_zscB2t3_sm4_wn250';
stat_ids = {'crRat_MR_wl15k_ws1k_lg5k',...
'crEKG_MR_wl15k_ws1k_lg5k'};
% the following won't run. no enough data for baseline.....
stat_ids = {'crRat_MR_wl30k_ws3k_lg5k',...
'crEKG_MR_wl30k_ws3k_lg5k'};
stat_id = 'crEKG_MR_wl15k_ws1k_lg5k'
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
cov
cov.trial
size(cov.trial)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
plot(cov.trial{1, 1})
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
%% Load Covaraites
% !!! Kuan: deal with down sampling these data to the HFA sampling rate (an.resample_freq)
if strcmp(st.model_lab,'crEKG')
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
elseif strcmp(st.model_lab,'crRat')
load(fullfile(root_dir,'emodynamics','data','Behavioral Data','behaviors_no film 7, with film 9 friends.mat'));
% Segment to trials
cov = ft_redefinetrial(cfgs, cov);
% Add in Rating data
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = nan(size(cov.trial{m_ix}));
cov.trial{m_ix}(1,1:numel(export_normative{m_ix})) = export_normative{m_ix};
end
else
error(['Unknown st.model_lab: ' st.model_lab]);
end
run('G:\emodynamics\scripts\stat_vars\crEKG_MR_wl15k_ws1k_lg5k_vars.m')
%%
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%% Data Preparation
SBJ_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','SBJ_vars', [SBJ '_vars.m'])];
eval(SBJ_vars_cmd);
an_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','an_vars', [an_id '_vars.m'])];
eval(an_vars_cmd);
stat_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts','stat_vars', [stat_id '_vars.m'])];
eval(stat_vars_cmd);
timing_vars_cmd = ['run ' fullfile(root_dir,'emodynamics','scripts', 'timing_vars.m')];
eval(timing_vars_cmd);
% Load Data
hfa_fname = strcat(SBJ_vars.dirs.proc,SBJ,'_ROI_',an_id,'.mat');
load(hfa_fname);
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info.mat'));
load([SBJ_vars.dirs.events,SBJ,'_bad_epochs_preproc.mat']);
% Load EKG as a dummy structure for the covariate of interest
load([SBJ_vars.dirs.import,SBJ,'_ekg_',num2str(trial_info.sample_rate),'hz.mat']);
cov = ekg;
% Prepare to cut trials
max_trl_len = max(trial_info.trial_offsets-trial_info.trial_onsets);
cfgs = [];
cfgs.trl = [trial_info.trial_onsets, ...             % start of trial (including baseline+buffer)
trial_info.trial_onsets+max_trl_len, ...                   % end of trial
zeros([length(trial_info.trial_onsets) 1]), ... % time of event relative to start of trial
trial_info.video_id];                           % trial type
cfgs.trl = round(cfgs.trl);
load([SBJ_vars.dirs.preproc,SBJ,'_ibi_',num2str(trial_info.sample_rate),'hz.mat']);
cov.trial{1} = ibi_1000hz_cubic;
cfgs
cov = ft_redefinetrial(cfgs, cov);
size(cov)
plot(cov.trial{1, 1})
ibi_1000hz_cubic
aaa = cov
aaa.trial
bbb = smooth(aaa.trial,10000)
bbb = smooth(aaa.trial{1},10000)
plot(bbb)
figure
plot(aaa.trial{1})
plot(bbb)
figure
plot(aaa.trial{1})
stat_ids = {'crRat_MR_wl15k_ws1k_lg5k',...
'crEKG_MR_wl15k_ws1k_lg5k'};
if exist('/home/knight/','dir');root_dir='/home/knight/';ft_dir=[root_dir 'hoycw/Apps/fieldtrip/'];
elseif exist('G:\','dir');root_dir='G:\';ft_dir='C:\Toolbox\fieldtrip\';
else root_dir='/Volumes/hoycw_clust/';ft_dir='/Users/colinhoy/Code/Apps/fieldtrip/';end
%% Set up paths
addpath(fullfile(root_dir,'emodynamics','scripts'));
addpath(fullfile(root_dir,'emodynamics','scripts','utils'));
addpath(ft_dir);
ft_defaults
%%
for st_ix = 1:numel(stat_ids)
SBJ05ab_HFA_corr(SBJ,an_id,stat_ids{st_ix})
end
m_ix
cov
m_ix
m_ix = 1
cov.trial{m_ix} = smooth (cov.trial{m_ix},10*1000);
m_ix = 2
cov.trial{m_ix} = smooth (cov.trial{m_ix},10*1000);
for m_ix = 1:numel(trial_info.video_id)
cov.trial{m_ix} = smooth (cov.trial{m_ix},10*1000);
end
m_ix
cov.trial{m_ix} = smooth (cov.trial{m_ix},10*1000);
cov.trial{m_ix}
size()
size(cov.trial{m_ix})
cov.trial{m_ix} = smooth (cov.trial{m_ix},10*1000);
cov.trial{m_ix}
plot(cov.trial{m_ix})
a = smooth (cov.trial{m_ix},10*1000);
a = smooth (cov.trial{5},10*1000);
a = smooth (cov.trial{3},10*1000);
a = smooth (cov.trial{6},10*1000);
figure
cov.trial{1}
plot(cov.trial{1})
smooth (cov.trial{m_ix},10*1000)
smooth (cov.trial{m_ix},10*1000);
m_ix
sum(isnan(cov{m_ix},10*1000))
sum(isnan(cov{m_ix))
sum(isnan(cov{m_ix}))
sum(isnan(cov.trial{m_ix}))
sum(isnan(cov.trial{1}))
sum(isnan(cov.trial{2}))
sum(isnan(cov.trial{3}))
sum(isnan(cov.trial{4}))
sum(isnan(cov.trial{5}))
sum(isnan(cov.trial{6}))
sum(isnan(cov.trial{7}))
sum(isnan(cov.trial{8}))
plot(ekg.trial{1, 1})
plot(cov.trial{1, 4})
%-- 8/16/2019 7:09 PM --%